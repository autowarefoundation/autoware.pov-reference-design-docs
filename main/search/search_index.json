{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about-reference-design-guideline-for-pov-vehicles","title":"About Reference Design Guideline for PoV Vehicles","text":"<p>This document serves a guideline to design and deploy a TRL-6 privately-owned vehicles based on Autoware. The readers can take this document as a starting point to select and configure the hardware and software components of the vehicles.</p>"},{"location":"#reference-design-guideline-for-pov-vehicles-documentation-structure","title":"Reference Design Guideline for PoV Vehicles documentation structure","text":"<p>The reference design WG publishes the guidelines for Privately-owned Vehicles (PoV), using the following document structure shown below.</p> <p></p> <p>For more details about the reference design WG, its goals and details of the Autoware Foundation working groups that oversees the project, refer to the Reference Design WG wiki</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>ODD</li> <li>Hardware Configuration</li> <li>Software Configuration</li> <li>Evaluation and Testing</li> </ul>"},{"location":"evaluation-and-testing/","title":"Evaluation and Testing","text":"<p>(To be completed)</p>"},{"location":"evaluation-and-testing/#expected-performance-metrics-for-arm-based-ecus","title":"Expected Performance Metrics for ARM-based ECUs","text":"Component AGX Orin Xavier Orin Nano LiDAR Detection 10 Hz 8 Hz 5 Hz Camera Detection 20 Hz 15 Hz 10 Hz Planning 10 Hz 10 Hz 8 Hz Control 50 Hz 50 Hz 50 Hz Power Usage 40W 25W 12W"},{"location":"evaluation-and-testing/#expected-performance-metrics-for-x86-based-ecus","title":"Expected Performance Metrics for X86-based ECUs","text":"Component Target FPS CPU Usage GPU Usage Latency LiDAR Detection 10 Hz 20-30% 40-60% &lt;100ms Camera Detection 15 Hz 15-25% 50-70% &lt;80ms Planning 10 Hz 30-40% N/A &lt;50ms Control 50 Hz 10-15% N/A &lt;20ms"},{"location":"evaluation-and-testing/#advantech-x86-based-ecu","title":"AdvanTech X86-based ECU","text":""},{"location":"evaluation-and-testing/#vecow-x86-based-ecu","title":"vecow X86-based ECU","text":""},{"location":"hardware-configuration/","title":"Hardware Configuration","text":"<p>(To be completed)</p> <p>This section describes the hardware configruations for LSA vehicles, including</p> <ul> <li>Chassis: describes the design specification of the chassis</li> <li>Sensors and Actuators: describes the sensors and actuators used in the reference design.</li> <li>ECUs: describes the ECUs used in the reference design.</li> </ul>"},{"location":"hardware-configuration/ECUs/","title":"ECUs","text":"<p>The page lists the ECUs being tested for LSA, which can meet the computation capacity requirement of LSA but does not overprovision the resource requirements. </p>"},{"location":"hardware-configuration/ECUs/ad-computers/","title":"AD Computers","text":""},{"location":"hardware-configuration/ECUs/ad-computers/#advantech-ad-computers","title":"Advantech AD Computers","text":"<p>Advantech's autonomous driving and robotic computers are of compact size, with GMSL camera and other sensor data available at ROS level.</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AFE-R760 (system, but the board  AFE-R360 is also avaialbe) Intel\u00ae Core\u2122 Ultra 7/5 Processors (Optional) MXM-type RTX A2000/A4500/5000Ada <ul><li>4 GMSL2 cameras</li><li>Dual Channel DDR5-5600, up to 96GB</li><li>3 x LAN up to 2.5GbE</li><li>4 x RS-232/422/485</li><li>2 x USB-C &amp; 2 USB-A  (10Gbps)</li><li>2 x CAN-FD</li></ul> <ul><li>Operating Temperature: -20 ~ 60\u00b0 C with 0.7m/s air flow</li><li>Vibration During Operation: 3 Grms, IEC 60068-2-64, random, 5 ~ 500 Hz, 1 hr/axis.</li><li>Shock During Operation 30 G, IEC 60068-2-27, half sine, 11 ms duration</li><li>EMC: Heavy industrial certificates, CE/FCC Class B, UKCA, CCC, BSMI</li></ul> Y AFE-R750-X0A1U (AGX Orin 32GB/64GB system, but the board  ASR-A701 is also avaialbe) 8/12-core NVIDIA Arm\u00ae Cortex A78AE v8.2 1792/2048-core NVIDIA Ampere GPU with 56/64 Tensor Cores <ul><li>8 x GMSL2 cameras</li><li>BOSCH BMI088 IMU</li><li>Xsens MTi3 IMU (Optional)</li><li>32/64GB 256-bit LPDDR5 DRAM</li><li> 4 x 2.5GbE, 4 x USB 3.2 Type A, 2 x isolated CANFD, 16bit isolated DIO, 2 x RS232/422/485</li> </ul> <ul><li>20~28V DC</li> <li>-10 ~ 60\u00b0C/50\u00b0C with 0.7 m/s air flow for 32GB/64GB</li></ul> Y <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#adlink-in-vehicle-computers","title":"ADLINK In-Vehicle Computers","text":"<p>ADLINK solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) ADM-AL30 Intel\u00ae 13/12th Gen Core\u2122 I processor Nvidia RTX 4000 SFF Ada 128GB RAM, Serial, USB, Automotive Ethernet (Base-T1), 10G Ethernet, CAN 2.0/ CAN-FD, M.2/SATA SSD 9~36 VDC, E-Mark, 7637-2, IEC 60068-2-64: Operating: 5Grms, random, 5-500Hz, 3 axes (with SSD) Y AVA-3510 Intel\u00ae Xeon\u00ae E-2278GE Dual MXM RTX 5000 64GB RAM,CAN, USB, 10G Ethernet, DIO, Hot-Swap SSD, USIM 9~36 VDC, MIL-STD-810H,ISO 7637-2 Y SOAFEE\u2019s AVA Developer Platform Ampere Altra ARMv8 optional USB, Ethernet, DIO, M.2 NVMe SSDs 110/220 AC Y RQX-58G 8-core Arm Nvidia Jetson AGX Xavier USB, Ethernet, M.2 NVME SSD, CAN, USIM, GMSL2 Camera support 9~36VDC, IEC 60068-2-64: Operating 3Grms, 5-500 Hz, 3 axes Y RQX-59G 8-core Arm Nvidia Jetson AGX Orin USB, Ethernet, M.2 NVME SSD, CAN, USIM, GMSL2 Camera support 9~36VDC, IEC 60068-2-64: Operating 3Grms, 5-500 Hz, 3 axes - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#nxp-in-vehicle-computers","title":"NXP In-Vehicle Computers","text":"<p>NXP solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) BLUEBOX 3.0 16 x Arm\u00ae Cortex\u00ae-A72 Dual RTX 8000 or RTX A6000 16 GB RAM CAN, FlexRay, USB, Ethernet, DIO, SSD ASIL-D - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#neousys-in-vehicle-computers","title":"Neousys In-Vehicle Computers","text":"<p>Neousys solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) 8805-GC AMD\u00ae EPYC\u2122 7003 NVIDIA\u00ae RTX A6000/ A4500 512GB CAN, USB, Ethernet, Serial, Easy-Swap SSD 8-48 Volt, Vibration:MIL-STD810G, Method 514.6, Category 4 Y 10208-GC Intel\u00ae 13th/12th-Gen Core\u2122 Dual 350W NVIDIA\u00ae RTX GPU 64GB CAN, USB, Ethernet, Serial, M2 NVMe SSD 8~48 Volt, Vibration: MIL-STD-810H, Method 514.8, Category 4 Y 9160-GC Intel\u00ae 13th/12th-Gen Core\u2122 NVIDIA\u00ae RTX series up to 130W TDP 64GB CAN, USB, Ethernet, PoE, Serial, two 2.5\" SATA HDD/SSD with RAID, M2 NVMe SSD 8~48, Vibration: Volt,MIL-STD-810G, Method 514.6, Category 4 - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#crystal-rugged-in-vehicle-computers","title":"Crystal Rugged In-Vehicle Computers","text":"<p>Crystal Rugged solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AVC 0161-AC Intel\u00ae Xeon\u00ae Scalable Dual GPU RTX Series 2TB RAM,CAN, USB, Ethernet, Serial, Hot-Swap SSD 10-32 VoltVibration:2 G RMS 10-1000 Hz, 3 axes - AVC0403 Intel\u00ae Xeon\u00ae Scalable or AMD EPYC\u2122 Optional (5 GPU) 2TB RAM, CAN, USB, Ethernet, Serial, Hot-Swap SSD 10-32 Volt, Vibration: 2 G RMS 10-1000 Hz, 3 axes - AVC1322 Intel\u00ae Xeon\u00ae D-1718T or Gen 12/13 Core\u2122 i3/i5/i7 NVIDIA\u00ae Jetson AGX Orin 128 GB DDR4 RAM, USB, Ethernet, Serial, SATA 2.5\u201d SSD 10-36 Volt, Vibration: 5.5g, 5-2,000Hz, 60 min/axis, 3 axis - AVC1753 10th Generation Intel\u00ae Core\u2122 and Xeon\u00ae Optional (1 GPU) 128 GB DDR4 RAM, USB, Ethernet, NVMe U.2 SSD/ 3 SATA SSD 8-36 VDC/ 120-240VAC 50/60Hz, Vibration: 5.5g, 5-2,000Hz, 60 min/axis, 3 axis - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#vecow-in-vehicle-computers","title":"Vecow In-Vehicle Computers","text":"<p>Vecow solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) ECX-3800 PEG Intel\u00ae 13th/12th-Gen Core\u2122 200W power of NVIDIA\u00ae or AMD graphics 64GB RAM, CAN, USB, Ethernet, PoE, Serial, M.2/SATA SSD, SIM Card 12-50 Volt, Vibration:MIL-STD810G, Procedure I, 20\u00b0C to 45\u00b0C - IVX-1000 Intel\u00ae 13th/12th-Gen Core\u2122 NVIDIA Quadro\u00ae MXM Graphics 64GB RAM, Ethernet, PoE, Serial, M.2/SATA/mSATA SSD, SIM Card 16-160 Volt, Vibration: IEC 61373 : 2010, 40\u00b0C to 85\u00b0C - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/","title":"Hardware Configuration","text":"<p>(To be completed)</p> <p>The page lists the sensors and actuators being tested for LSA, which can support the ODD of LSA. </p> <p>For software configuration of these sensors, see the Sensor Configuration Guide.</p> <p>Another page on Autoware Document lists the sensors and actuators being used for other use scenarios.</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/#velodyne-3d-lidar-sensors","title":"Velodyne 3D LIDAR Sensors","text":"<p>Velodyne Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Velodyne LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Alpha Prime 245m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Ultra Puck 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Puck 100m (+15\u00b0)/(-15\u00b0), (360\u00b0) Y Y Puck Hi-res 100m (+10\u00b0)/(-10\u00b0), (360\u00b0) Y Y"},{"location":"hardware-configuration/Sensors-and-Actuators/#ouster-3d-lidar-sensors","title":"Ouster 3D LIDAR Sensors","text":"<p>Ouster Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Ouster LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) OSDome 45m (180\u00b0), (360\u00b0) Y - OS0 100m (90\u00b0), (360\u00b0) Y - OS1 200m (45\u00b0), (360\u00b0) Y - OS2 400m (22,5\u00b0), (360\u00b0) Y Y <p>Link to ROS 2 driver: https://github.com/ros-drivers/ros2_ouster_drivers</p> <p>Link to company website: https://ouster.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/#robin-w-wide-fov-lidar","title":"Robin W Wide FOV LiDAR","text":"<p>Robin W Wide FoV Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Wide FOV LiDAR 0.1m~150m (120\u00b0), (70\u00b0) Y Yes <p>Link to company website: https://www.seyond.com/products/robin-w/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/","title":"LIDARs","text":"<p>For software configuration of these LiDAR sensors, see the Sensor Configuration Guide.</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#velodyne-3d-lidar-sensors","title":"Velodyne 3D LIDAR Sensors","text":"<p>Velodyne Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Velodyne LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Alpha Prime 245m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Ultra Puck 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Puck 100m (+15\u00b0)/(-15\u00b0), (360\u00b0) Y Y Puck Hi-res 100m (+10\u00b0)/(-10\u00b0), (360\u00b0) Y Y <p>Link to ROS 2 drivers: https://github.com/tier4/nebula https://github.com/ros-drivers/velodyne/tree/ros2/velodyne_pointcloud https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto/-/tree/master/src/drivers/velodyne_nodes https://github.com/autowarefoundation/awf_velodyne/tree/tier4/universe</p> <p>Link to company website: https://velodynelidar.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#robosense-3d-lidar-sensors","title":"RoboSense 3D LIDAR Sensors","text":"<p>RoboSense Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See RoboSense LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) M1 200m 25\u00b0/120\u00b0 - - E1 30m 90\u00b0/120\u00b0 - - Bpearl 100m 90\u00b0/360\u00b0 Y Y Ruby Plus 250m 40\u00b0/360\u00b0 Y ? Helios 32 150m 70\u00b0/360\u00b0 31\u00b0/360\u00b0 26\u00b0/360\u00b0 Y Y Helios 16 150m 30\u00b0/360\u00b0 Y ? <p>Link to ROS 2 driver: https://github.com/RoboSense-LiDAR/rslidar_sdk</p> <p>Link to company website: https://www.robosense.ai/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#hesai-3d-lidar-sensors","title":"HESAI 3D LIDAR Sensors","text":"<p>Hesai Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Hesai LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Pandar 128 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y - Pandar 64 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Pandar 40P 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y QT 128 50m (-52.6\u00b0/+52.6\u00b0), (360\u00b0) Y Y QT 64 20m (-52.1\u00b0/+52.1\u00b0), (360\u00b0) Y Y AT128 200m (25.4\u00b0), (120\u00b0) Y Y XT32 120m (-16\u00b0/+15\u00b0), (360\u00b0) Y Y XT16 120m (-15\u00b0/+15\u00b0), (360\u00b0) Y - FT120 100m (75\u00b0), (100\u00b0) - - ET25 250m (25\u00b0), (120\u00b0) - - <p>Link to ROS 2 drivers: https://github.com/tier4/nebula https://github.com/HesaiTechnology/HesaiLidar_General_ROS</p> <p>Link to company website: https://www.hesaitech.com/en/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#leishen-3d-lidar-sensors","title":"Leishen 3D LIDAR Sensors","text":"<p>Leishen Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Leishen LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) LS C16 150m (+15\u00b0/-15\u00b0), (360\u00b0) Y - LS C32\u00a0 150m (+15\u00b0/-15\u00b0), (360\u00b0) Y - CH 32 120m (+3.7\u00b0/-6.7\u00b0),(120\u00b0) Y - CH 128 20m (+14\u00b0/-17\u00b0)/(150\u00b0) Y - C32W 160m (+15\u00b0/-55\u00b0), (360\u00b0) Y - <p>Link to ROS 2 driver: https://github.com/leishen-lidar</p> <p>Link to company website: http://www.lslidar.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#livox-3d-lidar-sensors","title":"Livox 3D LIDAR Sensors","text":"<p>Livox Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Livox LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Horizon 260m (81.7\u00b0), (25.1\u00b0) Y Y Mid-40 260m (38.4\u00b0), Circular Y - Mid-70 90m (70.4\u00b0), (77.2\u00b0) Y - Mid-100 260m (38.4\u00b0), (98.4\u00b0) Y - Mid-360 70m (+52\u00b0/-7\u00b0), (360\u00b0) Y - Avia 190m (70.4\u00b0), Circular Y - HAP 150m (25\u00b0), (120\u00b0) - - Tele-15 320m (16.2\u00b0), (14.5\u00b0) - - <p>Link to ROS 2 driver: https://github.com/Livox-SDK/livox_ros2_driver</p> <p>Link to company website: https://www.livoxtech.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#ouster-3d-lidar-sensors","title":"Ouster 3D LIDAR Sensors","text":"<p>Ouster Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> <p>Software Configuration: See Ouster LiDAR Configuration Guide</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) OSDome 45m (180\u00b0), (360\u00b0) Y - OS0 100m (90\u00b0), (360\u00b0) Y - OS1 200m (45\u00b0), (360\u00b0) Y - OS2 400m (22,5\u00b0), (360\u00b0) Y Y <p>Link to ROS 2 driver: https://github.com/ros-drivers/ros2_ouster_drivers</p> <p>Link to company website: https://ouster.com/</p>"},{"location":"hardware-configuration/chassis/","title":"Chassis Design","text":"<p>The page suggests the reference chassis for the Low Speed Autonomy.</p>"},{"location":"hardware-configuration/chassis/#vehicle-spec","title":"Vehicle Spec","text":"<ul> <li>Dimension:</li> </ul> Reference Design Wheel base (mm) Dimension (mm) Length 2500 3500 Heigh 2500 Width 1500 <ul> <li>Power Train</li> </ul> Reference Design Battery Capacity 22 kWh Range 200 km Voltage 96 V <ul> <li>Steering (Only support Two-Wheel Drive, 2WD)</li> </ul> Reference Design 2 Wheel V 4 Wheel Optional <ul> <li>Others</li> </ul> Reference Design Speed &lt;20 kph (5,10,15) Payload 500 - 1000KG Turn Radius &gt; 4M Slope 20 (degree)"},{"location":"hardware-configuration/chassis/#electronicalelectric-architecture-eea","title":"Electronical/Electric Architecture, EEA","text":""},{"location":"hardware-configuration/chassis/#reference","title":"Reference","text":"<ul> <li>AWF Reference Design Discussion (Excel)</li> <li>Reference Drawing (PDF)</li> </ul>"},{"location":"odd-definition/","title":"ODD Definition","text":"<p>(To be completed)</p> <p>Operation Domain Definition (ODD) describes the use scenarios for the vehicles to be designed and deployed. The deployed system should meet the ODD to be functionaly completed. This section describes the ODD for use use scenarios for PoV.</p> <p>The ODD assumes that the vehicles can localize itself without GPS or HD map. However, the indoor ODD assumes that the vehicles do not have GPS reception and rely on camera and/or lidar for localization.</p>"},{"location":"odd-definition/PoV/","title":"PoV ODD definition","text":"<p>The page suggests the ODD use scenario for PoV.</p> Scenario ID Use Case Scenario Parameters and Values Demonstration LSA-CAM-0001 Normal driving \u25a0 Initial condition\u30fbThere is no NPC and no obstacle. EGO is running at Ve\u25a0 Action\u30fbEGO is running at Ve\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbEGO doesn't reach the destination\u3000 Ve: [10, 20, 30] km/h LSA-CAM-0002 Following the vehicle in front \u25a0 Initial condition\u30fbEGO is running at Ve and stays in the lane, follows the NPC\u25a0 Action\u30fbEGO follows the NPC at Ve. And NPC runs at Vf. EGO maintains the D[safe distance] from NPC\u25a0 Success condition\u30fbEGO reaches the destination \u30fbEGO maintains the D[safe distance] from NPC\u25a0 Failure condition\u30fbCollide with the preceding vehicle Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0003 Stop of the vehicle in front during following it \u25a0 Initial condition\u30fbEGO is running at Ve and stays in the lane, follows the NPC\u25a0 Action\u30fbAfter a while NPC stops. EGO stops at D[safe distance] from the vehicle in front after it stopped.\u25a0 Success condition\u30fbEGO stops D[m] before the vehicle NPC\u25a0 Failure condition\u30fbCollide with NPC\u30fbEGO decelaration exceeds -0.26G Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0004 Cutting-in \u25a0 Initial condition\u30fbEGO is running at Ve. NPC is running at Vf in the adjacent lane\u25a0 Action\u30fbNPC cuts in to the EGO vehicle's lane in distance D in front of the EGO vehicle at speed Vf. After the cut in, and EGO starts following NPC.\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : [Ve [km] / 2] LSA-CAM-0005 Cutting-out \u25a0 Initial condition\u30fbEGO is running at Ve and stays in the lane, follows the NPC\u25a0 Action\u30fbWhen the distance between NPC and EGO is D, NPC cuts off. EGO stays in the lane\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0006 Driving over crosswalk while a pedestrian crossing on the crosswalk \u25a0 Initial condition\u30fbEGO is running at Ve. There is a pedestrian or bicycle on crosswalk.\u30fb(May need to define the ped/bicycle position and the direction.)\u25a0 Action\u30fbEGO detects the pedestrian or bicycle on the crosswalk and stops gently. After pedestrian or bicycle leaves the crosswalk, EGO keeps driving.\u25a0 Success condition\u30fbEGO stops because detection of pedestrian or bicycle on the crosswalk\u25a0 Failure condition \u30fbCollide with the pedestrian or the bicycle Ve: [10, 20, 30] km/hVp: [2, 3, 5] km/h LSA-CAM-0007 Driving over crosswalk \u25a0 Initial condition\u30fbEGO is running at Ve and crosswalk is empty.\u25a0 Action\u30fbEGO runs at the constant speed of Ve\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0008 Driving over speed bump \u25a0Initial condition\u30fbEGO is running at Ve\u25a0Action\u30fbEGO starts to decrease its speed to slow velocity (Vs) when D[m] distance left to speed bump. EGO passes the speed bump at Vs. After passing the speed bump completely, it starts to accelerate and continues driving at Ve.\u25a0Success condition\u30fbEGO drives at Vs over speed bump area\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbEGO doesn't drive at Vs over speed bump area\u30fbEGO decelaration exceeds -0.26G Ve: [10, 20, 30] km/hVs: [5] km/h, D: 3m LSA-CAM-0009 Stopping on stop line \u25a0Initial condition\u30fbEGO is running at Ve\u25a0Action\u30fbEGO recognizes the stop line. It decelerates and stops before the stop line. After t[sec] EGO starts to move at Ve.\u25a0Success condition\u30fbEGO stops before the stop line, waits t[sec].\u30fbEgo reaches the destination.\u25a0Failure condition\u30fbEGO doesn't stop at the stop point\u30fbEGO doesn't move after waiting t[sec]\u30fbEGO decelaration exceeds -0.26G Ve: [10, 20, 30] km/ht[waiting time] : 3 sec LSA-CAM-0010 Recognize the traffic light signal \u25a0Initial Condition\u30fbEGO is running at Ve\u25a0ActionEGO recognizes the status of the traffic signal D [m] ahead(1) as green, and EGO continues driving(2) as red, EGO stops(3) as green, and it changes to yellow (stopping distance from the EGO speed at the deceleration -0.26G)[m] before the signal. EGO decelerates and stops(4) as green, and it changes to yellow less than (stopping distance from the EGO speed at the deceleration -0.26G)[m] before the signal. EGO does not decelerate and enter the intersection(5) as red, the signal changes to green. EGO stops deceleration and starts acceleration\u25a0Success condition\u30fbEGO follows the traffic light rules\u25a0Failure condition\u30fbEGO does not behave as traffic light rules Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0011 Run-out \u25a0Initial condition\u30fbEGO is running at Ve. There is a dog on the roadside.\u25a0Action\u30fbA dog runs out to road while EGO is driving. EGO detects the dog and stops gently. After dog leaves the road, EGO keeps driving.\u30fbMay need to define the size and the speed of the dog.\u25a0Success condition\u30fbEGO stops because detection of dog\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the dog Ve: [10, 20, 30] km/h LSA-CAM-00012 Run-out \u25a0Initial condition\u30fbEGO is running at Ve. There is a pedestrian on the roadside.\u25a0Action\u30fbA pedestrian tries to crossing the road at Vp while EGO is driving. EGO detects the pedestrian and stops gently (&lt;-0.26G). After pedestrian leaves the road, EGO keeps driving.\u25a0Success condition\u30fbEGO stops because of detection of pedestrian\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the pedestrian Ve: [10, 20, 30] km/hVp: [2, 3, 5] km/h UC-001-0013 A pedestrian on the road while driving \u25a0 Initial condition\u30fbEGO is running at Ve. There is a pedestrian on the road.\u25a0 Action\u30fbA Pedestrian stops on the road while EGO is driving. EGO detects the pedestrian and stops gently (less than -0.26G). \u25a0 Success condition\u30fbEGO stops because detection of pedestrian\u25a0 Failure condition\u30fbCollide with the pedestrian Ve: [10, 20, 30] km/h LSA-CAM-0014 Swerving around the static object \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle by the roadside. The lane width is wider enough to pass (i.e., 2 x vehicle width)\u25a0Action\u30fbEGO recognizes the obstacle on the roadside and starts taking action to pass the obstacle at D[m] distance. EGO must stay in the lane while passing the parked vehicle. \u25a0Success condition\u30fbEGO reaches the destination.\u25a0Failure condition\u30fbCollide with the parked vehicle\u30fbEGO leaves the lane \u30fbLateral distance between EGO and parked vehicle is less than LD[m] Ve: [10, 20, 30] km/hD[safe distance] : 4mLD[safe distance] : 2m LSA-CAM-0015 Swerving around the static object \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle by the roadside. The land width is less than 2 x vehicle width.\u25a0Action\u30fbEGO recognizes the obstacle on the roadside and starts taking action to pass the obstacle at D[m] distance. EGO must stay in the lane while passing the parked vehicle. \u25a0Success condition\u30fbEGO stops behind NPC.\u25a0Failure condition\u30fbCollide with the parked vehicle\u30fbEGO leaves the lane \u30fbLateral distance between EGO and parked vehicle is less than LD[m] Ve: [10, 20, 30] km/hD[safe distance] : 4mLD[safe distance] : 2m LSA-CAM-0016 Swerving around the pothole \u25a0Initial condition\u30fbEGO is running at Ve\u25a0Action\u30fbEGO recognizes the pothole on the road and starts taking action to pass the obstacle at D[m] distance.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO goes into pothole Ve: [10, 20, 30] km/hVs: [5] km/hD[safe distance] : 3m LSA-CAM-0017 Swerving around the static object \u25a0Initial condition\u30fbEGO is running at Ve. There is a bus by the roadside\u25a0Action\u30fbEGO recognizes the obstacle on the roadside and starts taking action to pass the obstacle at D[m] distance. EGO must stay in the lane while passing the bus. \u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the bus or trees\u30fbEGO leaves the lane \u30fbLateral distance between EGO and the bus is less than LD[m] Ve: [10, 20, 30] km/hD[safe distance] : 4mLD[safe distance] : 2m LSA-CAM-0018 Occlusion Spot \u25a0Initial condition\u30fbEGO is running at Ve. There is an NPC running at Vf. There are too many trees on both sides of the road. EGO's field of vision is not clear.\u25a0Action\u30fbEGO detects the NPC in a limited field of view. It waits for the NPC. After NPC passes the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0019 Occlusion Spot \u25a0Initial condition\u30fbEGO is running at Ve. There is an NPC is running at Vf. There are too many trees on roadside. EGO's field of vision is not clear.\u25a0Action\u30fbEGO detects the NPC in a limited field of view. It waits for the NPC. After NPC passes the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0020 Occlusion Spot \u25a0Initial condition\u30fbEGO is running at Ve. There is an NPC is running at Vf. There are too many trees on roadside. EGO's field of vision is not clear.\u25a0Action\u30fbEGO detects the NPC in a limited field of view. It waits for the NPC. After NPC passes the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0021 Blind spot \u25a0Initial condition\u30fbEGO is running at Ve and making right turn. There are cyclists in EGO's blind spot. They are running at Vb\u25a0Action\u30fbEGO detects cyclists in the blind spot it waits for the cyclists. After cyclists pass the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the cyclists Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h LSA-CAM-0022 Blind spot \u25a0Initial condition\u30fbEGO is running at Ve and making right turn at the intersection. There are cyclists in EGO's blind spot. They are running at Vb\u25a0Action\u30fbEGO detects cyclists in the blind spot it waits for the cyclists. After cyclists pass the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the cyclists Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h LSA-CAM-0023 Blind spot \u25a0Initial condition\u30fbEGO is running at Ve and making right turn at the intersection. There are cyclists and pedestrians in EGO's blind spot. Cyclists are running at Vb. Pedestrians are running at Vp.\u25a0Action\u30fbEGO detects cyclists in the blind spot it waits for the cyclists and pedestrians. After cyclists and pedestrians pass the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the cyclists\u30fbCollide with the pedestrians Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/hVp: [2, 3, 5] km/h LSA-CAM-0024 Driving in sloping road \u25a0Initial condition\u30fbEGO is running at Ve in sloping road. \u25a0Action\u30fbEGO keeps driving in sloping road without any break\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO runs backwards on sloping road Ve: [10, 20, 30] km/h LSA-CAM-0025 Driving in sloping road \u25a0Initial condition\u30fbEGO is running at Ve in sloping road. There is an NPC in front of the EGO. It is running at Vf\u25a0Action\u30fbEGO keeps driving in sloping road without any break and keeps the safe distance[D] between NPC\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO runs backwards on sloping road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0026 Run out in sloping road \u25a0Initial condition\u30fbEGO is running at Ve. There is a pedestrian on the sloping roadside.\u25a0Action\u30fbA pedestrian tries to crossing road at Vp while EGO is driving. EGO detects the pedestrian and stops gently. After pedestrian leaves the road, EGO keeps driving.\u25a0Success condition\u30fbEGO stops because detection of pedestrian\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the pedestrian Ve: [10, 20, 30] km/hVp: [10, 20, 30] km/h LSA-CAM-0027 NPC coming from opposite direction of the lane when EGO is in the same lane In Scenario Simulator v2, we cannot let NPC dynamically avoid EGO vehicle. We might need to predefine NPC path. Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 7m LSA-CAM-0028 NPC coming from opposite direction of the lane when EGO is in the other lane \u25a0Initial condition\u30fbEGO is running at Ve. An NPC comes from opposite direction of the lane in when EGO is in the other lane\u25a0Action\u30fbEGO keeps driving at Ve.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0029 NPC coming from opposite direction of the lane when EGO is in the same lane \u25a0Initial condition \u30fbEGO is running at Ve. An NPC comes from opposite direction in single-lane.\u25a0Action \u30fbNPC coming from the opposite direction of the lane, EGO stops at a safe distance[D]. \u25a0Success condition \u30fbEGO stops at a safe distance[D]. \u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 7m LSA-CAM-0030 NPC coming from opposite direction of the lane when EGO is in the same lane \u25a0Initial condition \u30fbEGO is running at Ve. An NPC comes from opposite direction in bi-directional lane.\u25a0Action \u30fbNPC coming from the opposite direction of the lane, EGO stops at a safe distance[D]. \u25a0Success condition \u30fbEGO stops at a safe distance[D]. \u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 7m LSA-CAM-0031 U-Turn \u25a0Initial condition \u30fbEGO is running at Ve. \u25a0Action \u30fbEGO makes a u-turn\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn\u2019t complete the turn Ve: [10, 20, 30] km/h LSA-CAM-0032 U-Turn \u25a0Initial condition \u30fbEGO is running at Ve. There is an NPC in other lane. NPC is running at Vf.\u25a0Action \u30fbEGO makes a U-turn onto the other lane if it estimates that it will not collide with the NPC. \u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide wit the NPC\u30fbEGO doesn\u2019t complete the turn Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0033 U-Turn \u25a0Initial condition \u30fbEGO is running at Ve. An NPC is running at Vf in other lane. Another NPC is running at Vf in front of the EGO.\u25a0Action \u30fbEGO keeps the safe distance[D] between NPC. When this NPC leaves the front of EGO, EGO makes a u-turn U-turn onto the other lane if it estimates that it will not collide with the NPC.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide wit the NPC\u30fbEGO doesn\u2019t complete the turn Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0034 Driving in main road \u25a0Initial condition\u30fbEGO is driving in the main road\u25a0Action\u30fb(1) NPC waits to EGO and EGO keeps driving at Ve.\u30fb(2) If NPC doesn\u2019t wait for EGO to pass first, EGO stops and waits to NPC.\u25a0Success condition\u30fbDriving on the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [0, 10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0035 Driving in main road \u25a0Initial condition\u30fbAn NPC is stopping at the stop line and going to make a right turn onto the main road\u25a0Action\u30fb(1) NPC waits to EGO and EGO keeps driving at Ve.\u30fb(2) If NPC doesn\u2019t wait to EGO, EGO stops and waits to NPC.\u25a0Success condition\u30fbDriving on the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0036 T-Junction Turn \u25a0Initial condition\u30fbEGO is going to make a left turn onto the t-junction\u25a0Action\u30fbOn the t-junction, EGO makes a left turn onto the t-junction.\u25a0Success condition\u30fbMake a left turn onto the t-junction \u25a0Failure condition\u30fbCan\u2019t make a left turn onto the t-junction Ve: [10, 20, 30] km/h LSA-CAM-0037 T-Junction Turn \u25a0Initial condition\u30fbEGO is stopping at the stop line and going to make a left turn onto the t-junction\u25a0Action\u30fbOn the t-junction, EGO waits t[sec] at the stop line then makes a left turn onto the t-junction\u25a0Success condition\u30fbMake a left turn onto the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/ht[waiting time] : 3 sec LSA-CAM-0038 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is going to make a left turn onto the main road\u25a0Action\u30fbOn the main road, an NPC is approaching from the right in distance D[m] and at Vf. EGO makes a left turn onto the main road if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it stops until NPC leaves the main road\u25a0Success condition\u30fbMake a left turn onto the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0039 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is stopping at the stop line and going to make a left turn onto the main road\u25a0Action\u30fbOn the main road, an NPC is approaching from the right in distance D[m] and at Vf. EGO makes a left turn onto the main road if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it continues to stop at the stop line then make a left turn after the NPC passed\u25a0Success condition\u30fbMake a left turn onto the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0040 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is going to make a left turn. There is an NPC on the main road. NPC is running at Vf.\u25a0Action\u30fbOn the t-junction, an NPC is approaching from the left in distance D[m] and at Vf. EGO makes a left turn onto the t-junction if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it stops until NPC leaves the road\u25a0Success condition\u30fbMake a left turn onto t-junction without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0041 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is stopping at the stop line and going to make a left turn. There is an NPC on the main road. NPC is running at Vf.\u25a0Action\u30fbOn the t-junction, an NPC is approaching from the left in distance D[m] and at Vf. EGO makes a left turn onto the t-junction if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it continues to stop at the stop line\u25a0Success condition\u30fbMake a left turn onto t-junction without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3mt[waiting time] : 3 sec LSA-CAM-0042 Driving in intersection \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle in the intersection.\u25a0Action\u30fbEGO detects the parked vehicle and stops gently at D[m] distance\u25a0Success condition\u30fbStop due to parked vehicle\u25a0Failure condition\u30fbCollide with the parked vehicle Ve: [10, 20, 30] km/h LSA-CAM-0043 There are parked vehicles on the both sides \u25a0Initial condition\u30fbEGO is running at Ve. There are parked vehicles on both sides of the same-directional double-lane road\u25a0Action\u30fbEGO detects parked vehicles. Using some part of the other lane EGO swerves the parked vehicles. After swerving it moves back its lane.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the parked vehicles Ve: [10, 20, 30] km/h LSA-CAM-0044 There are parked vehicles on the both sides \u25a0Initial condition\u30fbEGO is running at Ve. There are parked vehicles on both sides of the opposite-directional double-lane road\u25a0Action\u30fbEGO detects parked vehicles. EGO stops at safe distance[D] due that as EGO must stay in its lane.\u25a0Success condition\u30fbEGO stops at safe distance[D]\u25a0Failure condition\u30fbCollide with the parked vehicles Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0045 Stop due pedestrian \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle on the roadside of the opposite-directional double-lane road. A pedestrian getting into the parked vehicle\u25a0Action\u30fbEGO detects parked vehicle and pedestrian. It stops gently at safe distance[D] from parked vehicle. After the parked vehicle starts to run, EGO continues to drive while maintaining a safe distance[D].\u25a0Success condition\u30fbEGO stops at safe distance[D]\u25a0Failure condition\u30fbCollide with the parked vehicle Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hVp: [2, 3, 5] km/hD[safe distance] : 3m LSA-CAM-0046 \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle on the roadside of the same-directional double-lane road. A pedestrian getting into the parked vehicle\u25a0Action\u30fbEGO detects parked vehicle and pedestrian. It stops gently at safe distance[D] from parked vehicle. After the parked vehicle starts to run, EGO continues to drive while maintaining a safe distance[D].\u25a0Success condition\u30fbEGO stops at safe distance[D] and reaches the destination\u25a0Failure condition\u30fbCollide with the parked vehicle or pedestrian Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0047 Driving backward \u25a0Initial condition\u30fbEGO is driving backward\u25a0Action\u30fbEGO is able to drive backward\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO doesn't reach the destination Ve: [5, 10, 15] km/h LSA-CAM-0048 Obstacle on the road \u25a0Initial condition\u30fbEGO is running at Ve. There are garbage cans on right side of the same-directional double-lane road\u25a0Action\u30fbEGO detects garbage cans. Using some part of the other lane EGO swerves the garbage cans. After swerving it moves back its lane.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the garbage cans Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0049 Obstacle on the road \u25a0Initial condition\u30fbEGO is running at Ve. There are garbage cans on the right side of the opposite-directional double-lane road\u25a0Action\u30fbEGO detects garbage cans. EGO stops at safe distance[D] due that EGO must stay in its lane.\u25a0Success condition\u30fbEGO stops at safe distance[D]\u25a0Failure condition\u30fbCollide with the garbage cans Ve: [10, 20, 30] km/h LSA-CAM-0050 There is a parked vehicle in the road shoulder \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right. There's a parked vehicle on the shoulder lane\u25a0Action \u30fbEGO detects the parked vehicle and avoids it by swerving move back to the center line after it passed the parked vehicle.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC (on the shoulder lane or opposite lane) Ve: [10, 20, 30] km/h LSA-CAM-0051 There is a parked vehicle in the shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right. There's a parked vehicle on the shoulder lane\u25a0Action \u30fbEGO detects the parked vehicle, avoids it by changing lane and move back to its lane after it passed the parked vehicle.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/h LSA-CAM-0052 There is a vehicle in the shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right. NPC driving in shoulder lane.\u25a0Action \u30fbEGO detects NPC in the shoulder lane and continues to drive while maintaining a safe distance from that NPC in the shoulder lane. EGO must stay behind the NPC in the shoulder lane. \u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0053 There are bicyclists in the bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There's a bike-way to the right and there are bicyclist in bike-way\u25a0Action \u30fbEGO detects bicyclist in the bike-way, continues to drive and bicyclist passes gently\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicyclist Ve: [10, 20, 30] km/hVb: [10, 12, 15] LSA-CAM-0054 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in empty shoulder lane\u25a0Action \u30fbEGO pulls out in shoulder lane\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0055 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. NPC is running at Vf in shoulder lane. And there is an NPC in other lane .\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the shoulder lane. EGO follows the NPC in the lane until NPC pulls over.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0056 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. NPC is running at Vf in shoulder lane And there is an NPC coming from behind on the other lane at Vf\u25a0Action \u30fbEGO waits for the vehicle in the left lane to pass. EGO pulls out at a safe distance[D] from the vehicle on the shoulder lane\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h LSA-CAM-0057 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. There is an parked vehicle in shoulder lane.\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the shoulder lane.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0058 Pull out behavior in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. bicyclist is running at Vb in shoulder lane.\u25a0Action \u30fbEGO pulls out the shoulder lane keeping a safe distance[D] from the bicyclist.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicyclist Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h[D] Safe Distance: 3 LSA-CAM-0059 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in empty bicycle way\u25a0Action \u30fbEGO pulls out in bike-way\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0060 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in bicycle way. There is an parked vehicle in bicycle way.\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the bikeway.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0061 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in bicycle way. NPC is running at Vf in bicycle way. And there is an NPC in other lane .\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the bikeway. EGO follows the NPC in the lane until NPC pulls over.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0062 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in bicycle way. NPC is running at Vf in bicycle way. And there is an NPC coming from behind on the other lane at Vf\u25a0Action \u30fbEGO waits for the vehicle in the left lane to pass. EGO pulls out at a safe distance[D] from the vehicle on the bike way\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0063 Pull over behavior in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve.\u25a0Action \u30fbEGO pulls over in shoulder lane\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0064 Pull over in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked vehicle in the shoulder lane.\u25a0Action \u30fbEGO pulls over, keeping a safe distance between two vehicles \u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0065 Pull over in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked bicycle in the shoulder lane.\u25a0Action \u30fbEGO pulls over in shoulder lane after passing all parked bicycle\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicycle Ve: [10, 20, 30] km/h LSA-CAM-0066 Pull over in shoulder lane (dynamic objects) \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right and there are pedestrians in shoulder lane\u25a0Action \u30fbEGO pulls over, keeping a safe distance between pedestrians\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with pedestrian Ve: [10] km/h. D=10m (longer than safe distance for static objects), the speed while looking for the safe space should be defined. LSA-CAM-0067 Pull over in shoulder lane (Static objects) \u25a0Initial condition \u30fbEGO is running at Ve. There are garbage cans in the shoulder lane.\u25a0Action \u30fbEGO pulls over, keeping a safe distance between garbage cans\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with the garbage cans Ve: [10, 20] km/h, D= 1m (front)/1m (back), 4m (vehicle length) LSA-CAM-0068 Pull over in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There is an NPC in the shoulder lane.\u25a0Action \u30fbEGO tries to pull over but there is a parked vehicle in the destination point for this reason EGO finds an another available area to pull over.\u25a0Success condition \u30fbEGO stops at new location\u25a0Failure condition \u30fbCollide with parked vehicle Ve: [10, 20, 30] km/h LSA-CAM-0069 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve.\u25a0Action \u30fbEGO pulls over in bike-way\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0070 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked vehicle in the bicycle way.\u25a0Action \u30fbEGO pulls over in bike-way after passing all parked vehicle\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h LSA-CAM-0071 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There is an NPC and bicyclist in the bicycle way.\u25a0Action \u30fb(1) Bicyclist drives at Vb on bike-way. A pedestrian waits in the bike-way. EGO waits for bicyclist to pass. EGO pulls over at safe distance[D] to pedestrian\u30fb(2) Bicyclist drives at Vb on bike-way. A pedestrian leaves the bikeway at Vp. EGO waits for bicyclist and pedestrian to pass and pulls over.\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbCollide with bicyclist or pedestrian Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/hVp: [0, 2, 3, 5] km/h LSA-CAM-0072 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There are bicyclists in the bi-directional bicycle way.\u25a0Action \u30fbBicyclist drives at Vb on bike-way. EGO waits for bicyclists to pass. EGO pulls over\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbCollide with bicyclists Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h LSA-CAM-0073 Driving narrow road \u25a0Initial condition \u30fbEGO is running at Ve. The lane gets narrower.\u25a0Action \u30fbEGO using part of the bike-way continues the driving.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0074 Driving narrow road \u25a0Initial condition \u30fbEGO is running at Ve. The lane gets narrower. And there are multiple bicyclists in bicycle way\u25a0Action \u30fbBicyclists drives at Vb on bike-way. EGO waits for bicyclist to pass. EGO using part of the bike-way continues the driving\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicyclist Ve: [10, 20, 30] km/hVb:[10, 12, 15] km/h LSA-CAM-0075 Merging roads \u25a0Initial condition \u30fbEGO is running at Ve. An NPC is running at Vf.\u25a0Action \u30fbWhile NPC drives on the road, EGO makes a right turn. if they meet at the end of the road EGO stops and waits for the NPC to pass.if they don't meet the EGO continues to drive.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0076 Re-routing \u25a0Initial condition \u30fbEGO is running at Ve. There is a closed road in EGO\u2019s route.\u25a0Action \u30fbEGO detects the closed road and creates a new route. Even if it is not the shortest route, EGO follows this route. \u25a0Success condition \u30fbEGO creates a new route\u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn\u2019t create a new route and doesn\u2019t reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0077 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park in empty parking spot \u25a0Action EGO chooses a parking spot and parked\u25a0Success condition \u30fbEGO parks (reverse parking)\u25a0Failure condition \u30fbEGO doesn't park Ve: [10, 20, 30] km/h LSA-CAM-0078 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park. There are two vehicle in the parking spot\u25a0Action (1) EGO can park between two vehicles (2) EGO can park last empty parking spot\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/h LSA-CAM-0079 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park. There are two vehicle in the parking spot. But one of them is going to move\u25a0Action (1) EGO can wait until the first vehicle leaves the parking spot and it can parked there.(2) EGO can park second or last empty parking spot\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0080 Parking \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked vehicle in the parking spot.\u25a0Action \u30fbEGO parks in parking spot before parked vehicles\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/h LSA-CAM-0081 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park. There are two vehicle in the parking spot. But one of them is going to move\u25a0Action (1) EGO can park any empty parking spot(2) EGO can wait until the second vehicle leaves the parking spot and it can parked there.\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h"},{"location":"odd-definition/PoV/#reference","title":"Reference","text":""},{"location":"software-configuration/","title":"Software Configuration","text":"<p>This guide covers deploying Autoware on Low Speed Autonomy (LSA) vehicles.</p>"},{"location":"software-configuration/#deployment-workflow","title":"Deployment Workflow","text":"<ol> <li>Getting Started - Prepare your base system</li> <li>Platform Configuration - Choose your platform:<ul> <li>x86_64 ECUs for Intel/AMD systems</li> <li>ARM ECUs for NVIDIA Jetson platforms</li> </ul> </li> <li>Sensor Configuration - Set up your sensors</li> <li>Middleware Configuration - Optimize performance</li> </ol>"},{"location":"software-configuration/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Workflow Customization - Customize deployment with Ansible and Docker</li> <li>Package Creation - Create Debian packages for easy deployment</li> </ul>"},{"location":"software-configuration/#platform-specific-deployment","title":"Platform-Specific Deployment","text":""},{"location":"software-configuration/#x86_64-based-ecus","title":"x86_64-based ECUs","text":"<p>Deploy containerized Autoware on Intel/AMD platforms. View tested ECUs.</p>"},{"location":"software-configuration/#arm-based-ecus","title":"ARM-based ECUs","text":"<p>Deploy on NVIDIA Jetson and other ARM platforms for low-power applications. View tested ECUs.</p>"},{"location":"software-configuration/#key-configuration-areas","title":"Key Configuration Areas","text":""},{"location":"software-configuration/#sensor-configuration","title":"Sensor Configuration","text":"<p>Configure network interfaces, LiDAR sensors, cameras, CAN bus, GNSS/IMU, and time synchronization. Learn more.</p>"},{"location":"software-configuration/#middleware-configuration","title":"Middleware Configuration","text":"<p>Optimize ROS 2 middleware for LSA applications. Zenoh is recommended for wireless and cellular networks. Learn more.</p>"},{"location":"software-configuration/#resources","title":"Resources","text":"<ul> <li>Autoware Documentation</li> <li>ROS 2 Documentation</li> <li>NVIDIA Jetson Resources</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/","title":"ARM-based ECU Configuration","text":"<p>Deploy Autoware on ARM platforms, focusing on NVIDIA Jetson and AGX Orin for LSA vehicles.</p>"},{"location":"software-configuration/ARM-based_ECU/#system-preparation","title":"System Preparation","text":""},{"location":"software-configuration/ARM-based_ECU/#cuda-toolkit-installation","title":"CUDA Toolkit Installation","text":""},{"location":"software-configuration/ARM-based_ECU/#for-nvidia-agx-orin","title":"For NVIDIA AGX Orin","text":"<p>Important: Do NOT install CUDA packages manually on AGX Orin as it may break the system. CUDA is included with JetPack and must be installed through NVIDIA's SDK Manager.</p> <p>Installation Steps:</p> <ol> <li> <p>Download NVIDIA SDK Manager from https://developer.nvidia.com/nvidia-sdk-manager</p> </li> <li> <p>Select JetPack 6.0 (or latest version) in SDK Manager</p> </li> <li>This will flash the Orin device and install the appropriate CUDA version</li> <li> <p>JetPack 6.0 includes CUDA 12.2, cuDNN, TensorRT, and other essential libraries</p> </li> <li> <p>Flash and Install</p> </li> <li>Connect your AGX Orin to the host PC via USB-C</li> <li>Follow SDK Manager prompts to flash the device</li> <li> <p>The process will install Ubuntu, CUDA, and all necessary drivers</p> </li> <li> <p>Verify Installation after flashing: <pre><code># Check CUDA version\nnvcc --version\n\n# Verify Jetson platform and monitor system\nsudo apt install -y python3-pip\npip3 install jetson-stats\nsudo jtop\n\n# Check JetPack version\ncat /etc/nv_tegra_release\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/ARM-based_ECU/#for-other-arm64-platforms","title":"For Other ARM64 Platforms","text":"<p>For ARM64 platforms other than NVIDIA Jetson: - Check the manufacturer's product specifications or manual for CUDA support - Most non-NVIDIA ARM platforms do not support CUDA - Consider using CPU-only or other acceleration options if CUDA is not available</p> <p>Supported JetPack Versions by Platform: - AGX Orin: JetPack 6.0 or later (recommended) - Xavier Series: JetPack 5.1 or later - Nano/TX2: Check NVIDIA's compatibility matrix</p>"},{"location":"software-configuration/ARM-based_ECU/#platform-specific-optimizations","title":"Platform-Specific Optimizations","text":""},{"location":"software-configuration/ARM-based_ECU/#nvidia-agx-orin-configuration","title":"NVIDIA AGX Orin Configuration","text":""},{"location":"software-configuration/ARM-based_ECU/#power-management","title":"Power Management","text":"<p>Configure power modes based on deployment requirements:</p> <pre><code># Development mode - Maximum performance\nsudo nvpmodel -m 0  # MAXN mode\nsudo jetson_clocks\n\n# Production mode - Balanced performance/efficiency\nsudo nvpmodel -m 1  # 30W mode\nsudo jetson_clocks --restore\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#memory-configuration","title":"Memory Configuration","text":"<p>Optimize memory allocation for Autoware workloads:</p> <pre><code># Increase GPU memory allocation\necho \"gpu_mem_size=8G\" | sudo tee /etc/modprobe.d/tegra.conf\n\n# Configure swap for memory-intensive operations\nsudo fallocate -l 16G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#hardware-acceleration-setup","title":"Hardware Acceleration Setup","text":""},{"location":"software-configuration/ARM-based_ECU/#enable-dla-deep-learning-accelerator","title":"Enable DLA (Deep Learning Accelerator)","text":"<pre><code># ansible/roles/agx_orin_dla/tasks/main.yml\n---\n- name: Enable DLA cores\nlineinfile:\npath: /etc/environment\nline: \"{{ item }}\"\nloop:\n- 'CUDA_VISIBLE_DEVICES=0'\n- 'DLA_VISIBLE_DEVICES=0,1'\n- 'TF_ENABLE_TENSORRT_DLA=1'\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#performance-tuning","title":"Performance Tuning","text":""},{"location":"software-configuration/ARM-based_ECU/#cpu-governor-settings","title":"CPU Governor Settings","text":"<pre><code># Set performance governor for all cores\nfor cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do\necho performance | sudo tee $cpu\ndone\n\n# Make persistent\necho 'GOVERNOR=\"performance\"' | sudo tee /etc/default/cpufrequtils\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#gpu-optimization","title":"GPU Optimization","text":"<pre><code># ansible/roles/gpu_optimization/tasks/main.yml\n---\n- name: Set GPU clock to maximum\ncommand: nvidia-smi -pm 1\n\n- name: Configure GPU memory growth\nlineinfile:\npath: /etc/environment\nregexp: '^TF_FORCE_GPU_ALLOW_GROWTH='\nline: 'TF_FORCE_GPU_ALLOW_GROWTH=true'\n\n- name: Set CUDA device order\nlineinfile:\npath: /etc/environment\nregexp: '^CUDA_DEVICE_ORDER='\nline: 'CUDA_DEVICE_ORDER=PCI_BUS_ID'\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#storage-optimization","title":"Storage Optimization","text":""},{"location":"software-configuration/ARM-based_ECU/#nvme-configuration-for-high-speed-logging","title":"NVMe Configuration for High-Speed Logging","text":"<pre><code># ansible/roles/storage_optimization/tasks/main.yml\n---\n- name: Configure NVMe for optimal performance\nlineinfile:\npath: /etc/fstab\nline: '/dev/nvme0n1p1 /var/log/autoware ext4 noatime,nodiratime,nobarrier 0 2'\n\n- name: Set up log rotation for Autoware\ntemplate:\nsrc: autoware_logrotate.j2\ndest: /etc/logrotate.d/autoware\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#sd-card-optimization-jetson-nanoxavier-nx","title":"SD Card Optimization (Jetson Nano/Xavier NX)","text":"<pre><code># Reduce SD card wear\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\necho \"vm.vfs_cache_pressure=50\" | sudo tee -a /etc/sysctl.conf\n\n# Move temporary files to RAM\necho \"tmpfs /tmp tmpfs defaults,noatime,mode=1777 0 0\" | sudo tee -a /etc/fstab\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"software-configuration/ARM-based_ECU/#jetson-specific-monitoring","title":"Jetson-Specific Monitoring","text":"<pre><code># Real-time system monitoring\nsudo jtop\n\n# GPU/CPU/Memory stats\ntegrastats\n\n# Temperature monitoring\ncat /sys/devices/virtual/thermal/thermal_zone*/temp\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#performance-profiling","title":"Performance Profiling","text":"<pre><code># Profile Autoware with Nsight Systems\nnsys profile -t cuda,nvtx,osrt,cudnn,cublas \\\n-o autoware_profile \\\nros2 launch autoware_launch autoware.launch.xml\n\n# Analyze with Nsight Compute\nncu --target-processes all \\\n--metrics gpu__time_duration.sum \\\nros2 run perception_node perception_node\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#next-steps","title":"Next Steps","text":"<p>See Sensor Configuration Guide for detailed sensor setup</p>"},{"location":"software-configuration/getting-started/","title":"Getting Started","text":"<p>Foundational setup for deploying Autoware on Ubuntu 22.04 (AMD64/ARM64).</p>"},{"location":"software-configuration/getting-started/#deployment-overview","title":"Deployment Overview","text":"<pre><code>graph TD\n    A[Configure Host System] --&gt; B[Pull Docker Image]\n    B --&gt; C[Enter Container]\n    C --&gt; D[Configure Environment]\n    D --&gt; E[Install Autoware Packages]\n    E --&gt; F[Verify Installation]\n\n    style A fill:#e3f2fd\n    style F fill:#c8e6c9</code></pre>"},{"location":"software-configuration/getting-started/#system-requirements","title":"System Requirements","text":""},{"location":"software-configuration/getting-started/#hardware-requirements","title":"Hardware Requirements","text":""},{"location":"software-configuration/getting-started/#minimum-specifications","title":"Minimum Specifications","text":"<ul> <li>CPU: 8-core x86_64 (Intel/AMD) or ARMv8 (ARM64)</li> <li>RAM: 32 GB (16 GB for simulation-only)</li> <li>Storage: 30 GB of free space</li> <li>GPU: NVIDIA GPU with CUDA 11.8+ and Compute Capability 5.0+ (required for perception)</li> </ul>"},{"location":"software-configuration/getting-started/#recommended-specifications","title":"Recommended Specifications","text":"<ul> <li>CPU: 16+ cores</li> <li>RAM: 64 GB+</li> <li>Storage: 100 GB+ SSD</li> <li>GPU: NVIDIA RTX 3080+ (x86_64) or AGX Orin (ARM)</li> </ul>"},{"location":"software-configuration/getting-started/#network","title":"Network","text":"<ul> <li>Gigabit Ethernet for sensors</li> <li>Internet access for setup</li> <li>Optional: Secondary interface for vehicle communication</li> </ul>"},{"location":"software-configuration/getting-started/#operating-system","title":"Operating System","text":"<ul> <li>Ubuntu 22.04 LTS</li> <li>Kernel 5.15+</li> <li>Real-time kernel recommended for production</li> </ul>"},{"location":"software-configuration/getting-started/#deployment-options","title":"Deployment Options","text":"<p>Choose between two deployment approaches:</p> <ol> <li>Native Installation - Direct installation on the host system</li> <li>Containerized Deployment (Recommended) - Using Docker for isolation and reproducibility</li> </ol>"},{"location":"software-configuration/getting-started/#system-preparation","title":"System Preparation","text":""},{"location":"software-configuration/getting-started/#1-install-essential-packages","title":"1. Install Essential Packages","text":"<pre><code># Update package lists and upgrade system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install essential tools\nsudo apt install -y \\\nbuild-essential \\\ncmake \\\ngit \\\nwget \\\ncurl \\\ngnupg \\\nlsb-release \\\nsoftware-properties-common \\\npython3-pip \\\npython3-venv \\\nansible\n</code></pre>"},{"location":"software-configuration/getting-started/#containerized-deployment-workflow","title":"Containerized Deployment Workflow","text":"<p>This section describes the recommended containerized deployment approach using Docker, Ansible, and Debian packages.</p>"},{"location":"software-configuration/getting-started/#1-configure-host-system","title":"1. Configure Host System","text":"<p>Before deploying containers, ensure your host system has the necessary tools:</p> <ol> <li> <p>Install Docker Engine: Follow the official Docker installation guide for Ubuntu <pre><code># After installation, add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre></p> </li> <li> <p>Install NVIDIA Container Toolkit: Follow the official NVIDIA installation guide</p> </li> <li> <p>Note: Pre-installed with JetPack on NVIDIA Jetson devices</p> </li> <li> <p>Install NVIDIA Driver: Ensure NVIDIA drivers are installed on the host    <pre><code># Verify NVIDIA driver installation\nnvidia-smi\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/getting-started/#2-pull-pre-configured-images","title":"2. Pull Pre-configured Images","text":"<p>Use pre-configured Docker images that include CUDA and necessary dependencies:</p>"},{"location":"software-configuration/getting-started/#for-x86_64-systems","title":"For x86_64 Systems","text":"<pre><code>docker pull ghcr.io/autowarefoundation/autoware:universe-cuda-20250414\n</code></pre>"},{"location":"software-configuration/getting-started/#for-arm64-systems-jetson","title":"For ARM64 Systems (Jetson)","text":"<pre><code>docker pull nvcr.io/nvidia/l4t-tensorrt:r8.6.2-devel\n</code></pre> <p>Note: These images include CUDA pre-installed. For custom CUDA installations, see Workflow Customization.</p>"},{"location":"software-configuration/getting-started/#3-enter-container-environment","title":"3. Enter Container Environment","text":"<p>Launch the container with GPU support and necessary mounts:</p> <pre><code>docker run -it --name autoware-dev \\\n--gpus all \\\n--runtime nvidia \\\n--network host \\\n--privileged \\\n-v ~/autoware-deployment:/workspace \\\n-v /tmp/.X11-unix:/tmp/.X11-unix:rw \\\n-e DISPLAY=$DISPLAY \\\n&lt;image-name&gt; \\\n/bin/bash\n</code></pre> <p>Replace <code>&lt;image-name&gt;</code> with the image you pulled in step 2.</p>"},{"location":"software-configuration/getting-started/#4-configure-container-environment-with-ansible","title":"4. Configure Container Environment with Ansible","text":"<p>Inside the container, download and run the Ansible configuration:</p> <pre><code>git clone -b 2025.02 https://github.com/autowarefoundation/autoware.git\ncd autoware\n./setup-dev-env.sh\n</code></pre>"},{"location":"software-configuration/getting-started/#5-install-autoware-debian-packages","title":"5. Install Autoware Debian Packages","text":"<p>After Ansible configuration, visit the Autoware Debian package release page and install Autoware packages:</p> <pre><code># Configure Autoware repository (example for x86_64)\n# Visit the release page and download autoware-localrepo_2025.2-1_amd64.deb. Then,\nsudo apt install ./autoware-localrepo_2025.2-1_amd64.deb\n\n# Update and install Autoware\nsudo apt update\nsudo apt install -y autoware-full\n\n# Source the environment\nsource /opt/autoware/autoware-env\n</code></pre> <p>For ARM64/Jetson systems, use the appropriate repository package from the release page.</p>"},{"location":"software-configuration/getting-started/#6-verification","title":"6. Verification","text":"<p>Verify the installation is successful:</p> <pre><code># Check ROS 2 installation\nros2 --version\n\n# Check Autoware packages\nros2 pkg list | grep autoware\n\n# Verify CUDA (should show GPU information)\nnvidia-smi\n\n# Run a simple test\nros2 launch autoware_launch planning_simulator.launch.xml\n</code></pre> <p>If all checks pass, your containerized Autoware environment is ready for use.</p>"},{"location":"software-configuration/getting-started/#post-installation-verification","title":"Post-Installation Verification","text":"<p>This section uses a shell script to verify if the Autoware is successfully deployed to the system.</p>"},{"location":"software-configuration/getting-started/#1-system-check-script","title":"1. System Check Script","text":"<p>Download the system check script here and move the shell script to the working directory. Executes the verification script to verify the deployment.</p> <pre><code>chmod +x verify-installation.sh\n./verify-installation.sh\n</code></pre>"},{"location":"software-configuration/getting-started/#2-test-basic-functionality","title":"2. Test Basic Functionality","text":"<p>Follow the tutorial to run the planning simulation.</p>"},{"location":"software-configuration/getting-started/#next-steps","title":"Next Steps","text":"<p>With the base system configured, proceed to one of the following sections:</p> <ol> <li>x86_64-based ECU Configuration for Intel/AMD platforms</li> <li>ARM-based ECU Configuration for NVIDIA Jetson and the other ARM platforms</li> </ol>"},{"location":"software-configuration/middleware-configuration/","title":"Middleware Configuration","text":"<p>ROS 2 supports multiple middleware implementations (RMW). While DDS is default, Zenoh offers significant advantages for LSA applications.</p>"},{"location":"software-configuration/middleware-configuration/#middleware-options","title":"Middleware Options","text":""},{"location":"software-configuration/middleware-configuration/#dds-default","title":"DDS (Default)","text":"<ul> <li>Fast-RTPS (ROS 2 Humble default)</li> <li>Cyclone DDS (lightweight)</li> <li>RTI Connext (commercial)</li> </ul>"},{"location":"software-configuration/middleware-configuration/#zenoh-recommended-for-lsa","title":"Zenoh (Recommended for LSA)","text":"<p>Tier 1 middleware optimized for autonomous vehicles with: - Better wireless/cellular performance - Lower latency and resource usage - Zero configuration - Cloud-native support</p>"},{"location":"software-configuration/middleware-configuration/#zenoh-for-low-speed-autonomy","title":"Zenoh for Low Speed Autonomy","text":""},{"location":"software-configuration/middleware-configuration/#performance-benefits","title":"Performance Benefits","text":"<ul> <li>Lower Latency: Up to 50% reduction in message latency compared to DDS</li> <li>Higher Throughput: Better performance with large data streams (pointclouds, images)</li> <li>Efficient Resource Usage: Lower CPU and memory footprint</li> <li>Wireless Optimization: Superior performance on WiFi and cellular networks</li> </ul>"},{"location":"software-configuration/middleware-configuration/#operational-advantages","title":"Operational Advantages","text":"<ul> <li>Zero Configuration: Works out-of-the-box without complex QoS tuning</li> <li>Cloud Native: Seamless operation across local networks and internet</li> <li>Cellular Support: Native unicast support for 4G/5G networks</li> <li>Simplified Debugging: Built-in tools for monitoring and troubleshooting</li> </ul>"},{"location":"software-configuration/middleware-configuration/#lsa-specific-benefits","title":"LSA-Specific Benefits","text":"<ul> <li>Multi-Vehicle Coordination: Efficient fleet communication</li> <li>Remote Monitoring: Native support for cloud connectivity</li> <li>Edge Computing: Optimized for distributed architectures</li> <li>Dynamic Discovery: Better handling of intermittent connections</li> </ul>"},{"location":"software-configuration/middleware-configuration/#installation","title":"Installation","text":""},{"location":"software-configuration/middleware-configuration/#prerequisites","title":"Prerequisites","text":"<p>Complete the Getting Started guide first.</p>"},{"location":"software-configuration/middleware-configuration/#install-zenoh-rmw","title":"Install Zenoh RMW","text":"<pre><code># Add the Zenoh repository\necho \"deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ /\" | \\\nsudo tee /etc/apt/sources.list.d/zenoh.list &gt; /dev/null\nsudo apt update\n\n# Install RMW Zenoh\nsudo apt install -y ros-humble-rmw-zenoh-cpp\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#configuration","title":"Configuration","text":""},{"location":"software-configuration/middleware-configuration/#basic-setup","title":"Basic Setup","text":"<ol> <li> <p>Set the RMW Implementation <pre><code># Add to ~/.bashrc for permanent configuration\necho 'export RMW_IMPLEMENTATION=rmw_zenoh_cpp' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Or set temporarily for current session\nexport RMW_IMPLEMENTATION=rmw_zenoh_cpp\n</code></pre></p> </li> <li> <p>Configure Zenoh Router (Optional but Recommended)</p> </li> </ol> <p>Create a Zenoh configuration file: <pre><code>cat &gt; ~/zenoh_config.json5 &lt;&lt; EOF\n{\n  mode: \"router\",\n  listen: {\n    endpoints: [\n      \"tcp/0.0.0.0:7447\",\n      \"udp/0.0.0.0:7447\"\n    ]\n  },\n  scouting: {\n    multicast: {\n      enabled: true,\n      address: \"224.0.0.224:7446\",\n      interface: \"auto\"\n    }\n  }\n}\nEOF\n</code></pre></p> <ol> <li>Start Zenoh Router <pre><code># Install Zenoh router\nsudo apt install -y zenoh\n\n# Run with configuration\nzenohd -c ~/zenoh_config.json5\n</code></pre></li> </ol>"},{"location":"software-configuration/middleware-configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"software-configuration/middleware-configuration/#network-specific-settings","title":"Network-Specific Settings","text":"<p>For different network environments:</p> <pre><code># WiFi Networks\nexport ZENOH_MULTICAST_SCOUTING=true\nexport ZENOH_UNICAST_SCOUTING=false\n\n# Cellular Networks (4G/5G)\nexport ZENOH_MULTICAST_SCOUTING=false\nexport ZENOH_UNICAST_SCOUTING=true\nexport ZENOH_PEERS=\"tcp/router-ip:7447\"\n\n# Mixed Networks\nexport ZENOH_MULTICAST_SCOUTING=true\nexport ZENOH_UNICAST_SCOUTING=true\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Optimize for low latency\nexport ZENOH_CACHE_SIZE=0\nexport ZENOH_BATCHING_ENABLED=false\n\n# Optimize for high throughput\nexport ZENOH_CACHE_SIZE=10000\nexport ZENOH_BATCHING_ENABLED=true\nexport ZENOH_BATCH_SIZE=65536\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#integration-with-autoware","title":"Integration with Autoware","text":""},{"location":"software-configuration/middleware-configuration/#launch-file-configuration","title":"Launch File Configuration","text":"<p>Modify your Autoware launch files to use Zenoh:</p> <pre><code>&lt;!-- autoware_zenoh.launch.xml --&gt;\n&lt;launch&gt;\n&lt;!-- Set RMW implementation --&gt;\n&lt;set_env name=\"RMW_IMPLEMENTATION\" value=\"rmw_zenoh_cpp\"/&gt;\n\n&lt;!-- Include standard Autoware launch --&gt;\n&lt;include file=\"$(find-pkg-share autoware_launch)/launch/autoware.launch.xml\"&gt;\n&lt;arg name=\"vehicle_model\" value=\"$(var vehicle_model)\"/&gt;\n&lt;arg name=\"sensor_model\" value=\"$(var sensor_model)\"/&gt;\n&lt;/include&gt;\n&lt;/launch&gt;\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#multi-vehicle-setup","title":"Multi-Vehicle Setup","text":"<p>For fleet deployments:</p> <pre><code># Vehicle 1\nexport ROS_DOMAIN_ID=1\nexport ZENOH_SESSION_NAME=\"vehicle_1\"\n\n# Vehicle 2\nexport ROS_DOMAIN_ID=2\nexport ZENOH_SESSION_NAME=\"vehicle_2\"\n\n# Central Router (Fleet Coordinator)\nzenohd --id fleet_router --listen tcp/0.0.0.0:7447\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#switching-between-middleware","title":"Switching Between Middleware","text":"<p>You can easily switch between different RMW implementations:</p> <pre><code># Use Zenoh\nexport RMW_IMPLEMENTATION=rmw_zenoh_cpp\n\n# Switch back to Fast DDS\nexport RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n\n# Use Cyclone DDS\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"software-configuration/middleware-configuration/#zenoh-tools","title":"Zenoh Tools","text":"<pre><code># Install Zenoh tools\nsudo apt install -y zenoh-tools\n\n# Monitor active sessions\nz_info\n\n# Scout for Zenoh nodes\nz_scout\n\n# Monitor data flow\nz_sub -k \"/**\"\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#ros-2-introspection","title":"ROS 2 Introspection","text":"<pre><code># List active nodes\nros2 node list\n\n# Check middleware in use\nros2 doctor --report | grep middleware\n\n# Monitor topic bandwidth\nros2 topic bw /sensing/lidar/concatenated/pointcloud\n</code></pre>"},{"location":"software-configuration/middleware-configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/middleware-configuration/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Nodes not discovering each other <pre><code># Check multicast is enabled\nip link show | grep MULTICAST\n\n# Verify Zenoh router is running\nps aux | grep zenohd\n</code></pre></p> </li> <li> <p>High latency on WiFi <pre><code># Disable power saving\nsudo iw dev wlan0 set power_save off\n\n# Set WiFi to performance mode\nsudo iwconfig wlan0 rate 54M fixed\n</code></pre></p> </li> <li> <p>Connection issues over cellular <pre><code># Use explicit peer configuration\nexport ZENOH_PEERS=\"tcp/central-server-ip:7447\"\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/middleware-configuration/#fallback-to-dds","title":"Fallback to DDS","text":"<p>If issues persist, you can always fall back to DDS: <pre><code>unset RMW_IMPLEMENTATION\n# Or explicitly set\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n</code></pre></p>"},{"location":"software-configuration/middleware-configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Development: Use Cyclone DDS for simplicity</li> <li>Testing: Validate with target middleware early</li> <li>Production: Deploy with Zenoh for optimal performance</li> <li>Fleet: Use centralized Zenoh routers</li> <li>Remote: Configure explicit peers for cellular</li> </ol>"},{"location":"software-configuration/middleware-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Continue to Sensor Configuration</li> <li>Review platform-specific guides: x86_64 ECUs or ARM ECUs</li> <li>Learn about Zenoh architecture</li> </ul>"},{"location":"software-configuration/package-creation/","title":"Debian Package Creation","text":"<p>This guide covers creating Debian packages for Autoware components, enabling easy deployment and version management.</p>"},{"location":"software-configuration/package-creation/#overview","title":"Overview","text":"<p>Creating Debian packages from ROS 2 packages provides: - Version control and dependency management - Fast deployment without compilation - Consistent installations across systems - Easy rollback capabilities</p>"},{"location":"software-configuration/package-creation/#prerequisites","title":"Prerequisites","text":"<p>Install required tools:</p> <pre><code>sudo apt update\nsudo apt install -y \\\ndpkg-dev \\\ndebhelper \\\ndevscripts \\\nequivs \\\npython3-bloom \\\npython3-rosdep \\\nfakeroot\n</code></pre>"},{"location":"software-configuration/package-creation/#creating-debian-packages","title":"Creating Debian Packages","text":""},{"location":"software-configuration/package-creation/#single-package-creation","title":"Single Package Creation","text":"<p>Create a Debian package from a single ROS 2 package:</p> <pre><code>#!/bin/bash\n# make-deb.sh - Create .deb from ROS 2 package\n\nPACKAGE_NAME=$1\nWORKSPACE_PATH=${2:-$(pwd)}\n\n# Source ROS environment\nsource /opt/ros/humble/setup.bash\n\n# Navigate to package\ncd $WORKSPACE_PATH/src/$PACKAGE_NAME\n\n# Generate debian files using bloom\nbloom-generate rosdebian --os-name ubuntu --os-version jammy --ros-distro humble\n\n# Build the package\nfakeroot debian/rules binary\n\n# Move generated .deb files\nmkdir -p ~/debs\nmv ../*.deb ~/debs/\n\necho \"Package created: ~/debs/${PACKAGE_NAME}_*.deb\"\n</code></pre>"},{"location":"software-configuration/package-creation/#batch-package-creation","title":"Batch Package Creation","text":"<p>Process multiple packages in a workspace:</p> <pre><code>#!/bin/bash\n# package-deb.sh - Batch create .deb packages\n\nWORKSPACE_PATH=${1:-$(pwd)}\nOUTPUT_DIR=${2:-~/autoware-debs}\n\nmkdir -p $OUTPUT_DIR\n\n# Find all packages with package.xml\nfor pkg in $(find $WORKSPACE_PATH/src -name package.xml -exec dirname {} \\;); do\nPACKAGE_NAME=$(basename $pkg)\necho \"Processing: $PACKAGE_NAME\"\n\ncd $pkg\n\n# Skip if already processed\nif [ -f debian/changelog ]; then\necho \"  Skipping - debian files already exist\"\ncontinue\nfi\n\n# Generate debian files\nbloom-generate rosdebian \\\n--os-name ubuntu \\\n--os-version jammy \\\n--ros-distro humble \\\n|| continue\n\n# Build package\nDEB_BUILD_OPTIONS=nocheck fakeroot debian/rules binary\n\n    # Move results\nmv ../*.deb $OUTPUT_DIR/ 2&gt;/dev/null || true\ndone\n\necho \"Packages created in: $OUTPUT_DIR\"\n</code></pre>"},{"location":"software-configuration/package-creation/#advanced-package-configuration","title":"Advanced Package Configuration","text":""},{"location":"software-configuration/package-creation/#custom-control-file","title":"Custom Control File","text":"<p>Create custom package metadata:</p> <pre><code># debian/control\nSource: autoware-custom-sensor-driver\nSection: misc\nPriority: optional\nMaintainer: Your Name &lt;your.email@example.com&gt;\nBuild-Depends: debhelper (&gt;= 9),\n               ros-humble-ros-core,\n               ros-humble-sensor-msgs,\n               ros-humble-std-msgs\nStandards-Version: 3.9.8\nHomepage: https://github.com/your-org/custom-driver\n\nPackage: autoware-custom-sensor-driver\nArchitecture: any\nDepends: ${shlibs:Depends},\n         ${misc:Depends},\n         ros-humble-ros-core,\n         ros-humble-sensor-msgs,\n         ros-humble-std-msgs\nDescription: Custom sensor driver for Autoware\n This package provides ROS 2 drivers for custom sensors\n used in Autoware autonomous driving stack.\n</code></pre>"},{"location":"software-configuration/package-creation/#post-installation-scripts","title":"Post-Installation Scripts","text":"<p>Add post-install configuration:</p> <pre><code># debian/postinst\n#!/bin/bash\nset -e\n\ncase \"$1\" in\nconfigure)\n# Create necessary directories\nmkdir -p /opt/autoware/config\n        mkdir -p /var/log/autoware\n\n        # Set permissions\nchmod 755 /opt/autoware/config\n\n        # Configure systemd service if needed\nif [ -f /opt/autoware/systemd/autoware.service ]; then\nsystemctl daemon-reload\n            systemctl enable autoware.service\n        fi\n\n# Update ROS environment\necho \"source /opt/autoware/setup.bash\" &gt;&gt; /etc/bash.bashrc\n        ;;\n\nabort-upgrade|abort-remove|abort-deconfigure)\n;;\n\n*)\necho \"postinst called with unknown argument '$1'\" &gt;&amp;2\nexit 1\n;;\nesac\n\nexit 0\n</code></pre>"},{"location":"software-configuration/package-creation/#repository-management","title":"Repository Management","text":""},{"location":"software-configuration/package-creation/#creating-local-apt-repository","title":"Creating Local APT Repository","text":"<p>Set up a local repository for your packages:</p> <pre><code>#!/bin/bash\n# setup-local-repo.sh\n\nREPO_BASE=~/local-apt-repo\nDIST=jammy\nCOMPONENT=main\nARCH=arm64\n\n# Create repository structure\nmkdir -p $REPO_BASE/{dists/$DIST/$COMPONENT/binary-$ARCH,pool/$COMPONENT}\n\n# Copy packages\ncp ~/autoware-debs/*.deb $REPO_BASE/pool/$COMPONENT/\n\n# Generate package index\ncd $REPO_BASE\ndpkg-scanpackages pool/$COMPONENT /dev/null | \\\ngzip -9c &gt; dists/$DIST/$COMPONENT/binary-$ARCH/Packages.gz\n\n# Create Release file\ncat &gt; dists/$DIST/Release &lt;&lt; EOF\nOrigin: Autoware Local Repository\nLabel: Autoware Local\nSuite: $DIST\nCodename: $DIST\nVersion: 1.0\nArchitectures: $ARCH\nComponents: $COMPONENT\nDescription: Local Autoware Package Repository\nEOF\n\n# Add repository to sources\necho \"deb [trusted=yes] file://$REPO_BASE $DIST $COMPONENT\" | \\\nsudo tee /etc/apt/sources.list.d/autoware-local.list\n\nsudo apt update\n</code></pre>"},{"location":"software-configuration/package-creation/#publishing-to-remote-repository","title":"Publishing to Remote Repository","text":"<p>Upload packages to a remote APT repository:</p> <pre><code>#!/bin/bash\n# publish-packages.sh\n\nREMOTE_HOST=repo.example.com\nREMOTE_PATH=/var/www/apt/autoware\nPACKAGES_DIR=~/autoware-debs\n\n# Upload packages\nrsync -avz --progress \\\n$PACKAGES_DIR/*.deb \\\n$REMOTE_HOST:$REMOTE_PATH/pool/main/\n\n# Update remote repository\nssh $REMOTE_HOST &lt;&lt; 'EOF'\ncd /var/www/apt/autoware\ndpkg-scanpackages pool/main /dev/null | \\\n    gzip -9c &gt; dists/jammy/main/binary-arm64/Packages.gz\napt-ftparchive release dists/jammy &gt; dists/jammy/Release\nEOF\n</code></pre>"},{"location":"software-configuration/package-creation/#package-versioning","title":"Package Versioning","text":""},{"location":"software-configuration/package-creation/#semantic-versioning","title":"Semantic Versioning","text":"<p>Follow semantic versioning for packages:</p> <pre><code># Update version in package.xml\n&lt;version&gt;1.2.3&lt;/version&gt;\n\n# Update debian changelog\ndch -v 1.2.3-1 \"New upstream release\"\ndch -a \"Added feature X\"\ndch -a \"Fixed bug Y\"\n</code></pre>"},{"location":"software-configuration/package-creation/#automated-version-management","title":"Automated Version Management","text":"<pre><code>#!/usr/bin/env python3\n# update_version.py\n\nimport xml.etree.ElementTree as ET\nimport subprocess\nimport sys\n\ndef update_package_version(package_path, new_version):\n    # Update package.xml\n    package_xml = f\"{package_path}/package.xml\"\n    tree = ET.parse(package_xml)\n    root = tree.getroot()\n\n    version_elem = root.find('version')\n    version_elem.text = new_version\n\n    tree.write(package_xml)\n\n    # Update debian changelog\n    subprocess.run([\n        'dch', '-v', f'{new_version}-1',\n        '-D', 'jammy',\n        f'Update to version {new_version}'\n    ], cwd=package_path)\n\nif __name__ == \"__main__\":\n    update_package_version(sys.argv[1], sys.argv[2])\n</code></pre>"},{"location":"software-configuration/package-creation/#multi-architecture-builds","title":"Multi-Architecture Builds","text":""},{"location":"software-configuration/package-creation/#cross-compilation-setup","title":"Cross-Compilation Setup","text":"<p>Build packages for different architectures:</p> <pre><code># Install cross-compilation tools\nsudo apt install -y \\\ngcc-aarch64-linux-gnu \\\ng++-aarch64-linux-gnu \\\nqemu-user-static\n\n# Configure for ARM64 build on x86_64\nexport CC=aarch64-linux-gnu-gcc\nexport CXX=aarch64-linux-gnu-g++\nexport CMAKE_TOOLCHAIN_FILE=/opt/ros/humble/share/ros_cross_compile/cmake/toolchains/aarch64.cmake\n</code></pre>"},{"location":"software-configuration/package-creation/#docker-based-multi-arch-build","title":"Docker-Based Multi-Arch Build","text":"<pre><code># Dockerfile.multiarch\nARG ARCH=arm64\nFROM --platform=linux/${ARCH} ros:humble-ros-base\n\n# Install build dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\ndpkg-dev \\\ndebhelper \\\npython3-bloom \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\nWORKDIR /workspace\n\n# Copy source\nCOPY src/ ./src/\n\n# Build script\nCOPY scripts/build_packages.sh /\nRUN chmod +x /build_packages.sh\n\n# Build packages\nRUN /build_packages.sh\n\n# Extract packages\nFROM scratch\nCOPY --from=0 /workspace/debs/* /\n</code></pre> <p>Build for multiple architectures:</p> <pre><code># Build for ARM64\ndocker buildx build --platform linux/arm64 \\\n--output type=local,dest=./packages/arm64 \\\n-f Dockerfile.multiarch .\n\n# Build for AMD64\ndocker buildx build --platform linux/amd64 \\\n--output type=local,dest=./packages/amd64 \\\n-f Dockerfile.multiarch .\n</code></pre>"},{"location":"software-configuration/package-creation/#package-testing","title":"Package Testing","text":""},{"location":"software-configuration/package-creation/#installation-testing","title":"Installation Testing","text":"<pre><code>#!/bin/bash\n# test-package.sh\n\nPACKAGE_FILE=$1\nTEST_CONTAINER=\"autoware-package-test\"\n\n# Create test container\ndocker run -d --name $TEST_CONTAINER \\\nubuntu:22.04 tail -f /dev/null\n\n# Copy and install package\ndocker cp $PACKAGE_FILE $TEST_CONTAINER:/tmp/\ndocker exec $TEST_CONTAINER bash -c \"\n    apt update\n    apt install -y /tmp/$(basename $PACKAGE_FILE)\n    # Run basic tests\n    dpkg -L $(basename $PACKAGE_FILE .deb)\n    # Check for missing dependencies\n    apt-get check\n\"\n\n# Cleanup\ndocker rm -f $TEST_CONTAINER\n</code></pre>"},{"location":"software-configuration/package-creation/#integration-testing","title":"Integration Testing","text":"<pre><code># .gitlab-ci.yml snippet\ntest-packages:\nstage: test\nimage: ros:humble\nscript:\n- apt update\n- apt install -y ./packages/*.deb\n- source /opt/ros/humble/setup.bash\n- ros2 pkg list | grep autoware\n- ros2 run autoware_package test_node\n</code></pre>"},{"location":"software-configuration/package-creation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/package-creation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Missing Dependencies <pre><code># Check dependencies\ndpkg-deb -I package.deb | grep Depends\n\n# Install missing dependencies\nsudo apt-get install -f\n</code></pre></p> </li> <li> <p>Build Failures <pre><code># Clean build environment\ndebian/rules clean\n\n# Verbose build\nDEB_BUILD_OPTIONS=\"nostrip noopt\" fakeroot debian/rules binary\n</code></pre></p> </li> <li> <p>Version Conflicts <pre><code># Force version\nsudo dpkg -i --force-overwrite package.deb\n\n# Check conflicts\napt-cache policy package-name\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/package-creation/#best-practices","title":"Best Practices","text":"<ol> <li>Dependency Management: Specify exact versions for critical dependencies</li> <li>Testing: Always test packages in clean environments</li> <li>Documentation: Include README.Debian with package-specific notes</li> <li>Signing: Sign packages for production repositories</li> <li>Automation: Use CI/CD for consistent package builds</li> <li>Cleanup: Remove build artifacts and temporary files</li> </ol>"},{"location":"software-configuration/sensor-configuration/","title":"Sensor Configuration","text":"<p>Configure sensors for LSA vehicles with Autoware (platform-agnostic).</p>"},{"location":"software-configuration/sensor-configuration/#supported-sensors","title":"Supported Sensors","text":"<ul> <li>LiDAR: 3D environment perception</li> <li>Cameras: Object detection and classification</li> <li>CAN Bus: Vehicle control interface</li> <li>GNSS/IMU: Localization and navigation</li> <li>Radar: Additional perception (optional)</li> </ul>"},{"location":"software-configuration/sensor-configuration/#network-configuration","title":"Network Configuration","text":""},{"location":"software-configuration/sensor-configuration/#ethernet-based-sensors","title":"Ethernet-based Sensors","text":"<p>Many modern sensors use Ethernet for high-bandwidth data transmission. Proper network configuration is crucial for reliable sensor operation.</p>"},{"location":"software-configuration/sensor-configuration/#network-interface-setup","title":"Network Interface Setup","text":"<pre><code># List available network interfaces\nip link show\n\n# Configure static IP for sensor network\nsudo nmcli con add type ethernet \\\ncon-name sensor-network \\\nifname enp2s0 \\\nip4 192.168.1.100/24\n\n# Activate the connection\nsudo nmcli con up sensor-network\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#network-optimization","title":"Network Optimization","text":"<pre><code># Increase receive buffer size for high-bandwidth sensors\nsudo sysctl -w net.core.rmem_max=134217728\nsudo sysctl -w net.core.rmem_default=134217728\n\n# Make settings persistent\necho \"net.core.rmem_max=134217728\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.rmem_default=134217728\" | sudo tee -a /etc/sysctl.conf\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#time-sensitive-networking-tsn","title":"Time-Sensitive Networking (TSN)","text":"<p>For real-time communication requirements, configure TSN on supported hardware:</p> <pre><code># ansible/roles/tsn_config/tasks/main.yml\n---\n- name: Install TSN utilities\napt:\nname:\n- linuxptp\n- ethtool\nstate: present\n\n- name: Configure PTP for time synchronization\ntemplate:\nsrc: ptp4l.conf.j2\ndest: /etc/linuxptp/ptp4l.conf\n\n- name: Enable hardware timestamping\ncommand: \"ethtool -T {{ tsn_interface }}\"\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#lidar-configuration","title":"LiDAR Configuration","text":""},{"location":"software-configuration/sensor-configuration/#velodyne-lidar","title":"Velodyne LiDAR","text":"<p>Velodyne LiDARs use UDP packets for data transmission over Ethernet. For hardware specifications and supported models, see Velodyne Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation","title":"Installation","text":"<pre><code># Install Velodyne ROS 2 driver\nsudo apt install ros-humble-velodyne\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#arm-specific-configuration","title":"ARM-Specific Configuration","text":"<p>For ARM platforms like NVIDIA Jetson:</p> <pre><code># ansible/roles/velodyne_arm/tasks/main.yml\n---\n- name: Install Velodyne driver dependencies\napt:\nname:\n- ros-humble-velodyne\n- ros-humble-velodyne-pointcloud\nstate: present\n\n- name: Configure network interface for LiDAR\nnmcli:\nconn_name: lidar0\nifname: eth1\ntype: ethernet\nip4: 192.168.1.100/24\nstate: present\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration","title":"Configuration","text":"<p>Create a configuration file for your Velodyne sensor:</p> <pre><code># ~/autoware_config/sensors/velodyne_config.yaml\n/**:\nros__parameters:\ndevice_ip: \"192.168.1.201\"\nport: 2368\nmodel: \"VLP32C\"  # Options: VLP16, VLP32C, VLS128\nrpm: 600\ntime_offset: 0.0\nenabled: true\nread_once: false\nread_fast: false\nrepeat_delay: 0.0\nframe_id: \"velodyne\"\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#launch-file","title":"Launch File","text":"<pre><code>&lt;!-- velodyne.launch.xml --&gt;\n&lt;launch&gt;\n&lt;node pkg=\"velodyne_driver\" exec=\"velodyne_driver_node\" name=\"velodyne_driver\"&gt;\n&lt;param from=\"$(find-pkg-share autoware_config)/sensors/velodyne_config.yaml\"/&gt;\n&lt;/node&gt;\n\n&lt;node pkg=\"velodyne_pointcloud\" exec=\"velodyne_convert_node\" name=\"velodyne_convert\"&gt;\n&lt;param name=\"model\" value=\"VLP32C\"/&gt;\n&lt;remap from=\"velodyne_packets\" to=\"velodyne_driver/velodyne_packets\"/&gt;\n&lt;/node&gt;\n&lt;/launch&gt;\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#ouster-lidar","title":"Ouster LiDAR","text":"<p>Ouster LiDARs provide both point cloud and IMU data. For hardware specifications and supported models, see Ouster Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation_1","title":"Installation","text":"<pre><code># Install Ouster ROS 2 driver\nsudo apt install ros-humble-ros2-ouster\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_1","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/ouster_config.yaml\nouster_driver:\nros__parameters:\nsensor_hostname: \"192.168.1.202\"\nlidar_port: 7502\nimu_port: 7503\nlidar_mode: \"1024x10\"  # Options: 512x10, 1024x10, 2048x10\ntimestamp_mode: \"TIME_FROM_ROS_TIME\"\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#arm-specific-dma-optimization","title":"ARM-Specific DMA Optimization","text":"<p>For ARM platforms, enable DMA transfer for better performance:</p> <pre><code># ansible/roles/ouster_arm/tasks/main.yml\n---\n- name: Configure Ouster with DMA transfer\ntemplate:\nsrc: ouster_dma_config.j2\ndest: /etc/ros2/ouster_config.yaml\nvars:\ndma_enabled: true\nbuffer_size_mb: 256\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#hesai-lidar","title":"Hesai LiDAR","text":"<p>Hesai LiDARs are popular in autonomous vehicle applications. For hardware specifications and supported models, see Hesai Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation_2","title":"Installation","text":"<pre><code># Clone and build Hesai driver\ncd ~/autoware_ws/src\ngit clone https://github.com/HesaiTechnology/HesaiLidar_ROS_2.0.git\ncd ~/autoware_ws\ncolcon build --packages-select hesai_ros_driver\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_2","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/hesai_config.yaml\n/**:\nros__parameters:\nlidar_type: \"PandarXT32\"  # Options: Pandar40P, PandarXT32, etc.\nserver_ip: \"192.168.1.201\"\nlidar_recv_port: 2368\ngps_recv_port: 10110\nstart_angle: 0\nresolution: 0.2  # Angular resolution in degrees\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#robosense-lidar","title":"RoboSense LiDAR","text":"<p>RoboSense LiDARs offer various models for different autonomous driving applications. For hardware specifications and supported models, see RoboSense Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation_3","title":"Installation","text":"<pre><code># Clone and build RoboSense driver\ncd ~/autoware_ws/src\ngit clone https://github.com/RoboSense-LiDAR/rslidar_sdk.git\ncd ~/autoware_ws\ncolcon build --packages-select rslidar_sdk\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_3","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/robosense_config.yaml\n/**:\nros__parameters:\nlidar_type: \"RS32\"  # Options: RS16, RS32, RSBP, RS128, RS80, RSM1, RSHelios\ndevice_ip: \"192.168.1.200\"\nmsop_port: 6699\ndifop_port: 7788\nstart_angle: 0\nend_angle: 360\nmin_distance: 0.2\nmax_distance: 200\nuse_lidar_clock: false\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#leishen-lidar","title":"Leishen LiDAR","text":"<p>Leishen provides cost-effective LiDAR solutions for autonomous vehicles. For hardware specifications and supported models, see Leishen Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation_4","title":"Installation","text":"<pre><code># Clone and build Leishen driver\ncd ~/autoware_ws/src\ngit clone https://github.com/leishen-lidar/LSLidar_ROS2_driver.git\ncd ~/autoware_ws\ncolcon build --packages-select lslidar_driver\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_4","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/leishen_config.yaml\n/**:\nros__parameters:\ndevice_ip: \"192.168.1.222\"\ndevice_port: 2368\ndevice_type: \"C32\"  # Options: C16, C32, CH32, CH128, C32W\nframe_id: \"lslidar\"\nscan_frequency: 10.0\nmin_range: 0.15\nmax_range: 150.0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#livox-lidar","title":"Livox LiDAR","text":"<p>Livox offers solid-state LiDAR technology with unique non-repetitive scanning patterns. For hardware specifications and supported models, see Livox Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation_5","title":"Installation","text":"<pre><code># Install Livox ROS 2 driver\nsudo apt install ros-humble-livox-ros2-driver\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_5","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/livox_config.yaml\n/**:\nros__parameters:\nbroadcast_code: \"3JEDHC900100791\"  # Device broadcast code\nenable_lidar_bag: false\nenable_imu_bag: false\nextrinsic_parameter_source: 0  # 0: broadcast, 1: from config file\nenable_high_sensitivity: false\nframe_id: \"livox_frame\"\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#robin-w-wide-fov-lidar","title":"Robin W Wide FOV LiDAR","text":"<p>Robin W offers wide field of view LiDAR technology for comprehensive environment sensing. For hardware specifications and supported models, see Robin W Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#installation_6","title":"Installation","text":"<pre><code># Robin W LiDAR typically uses manufacturer-provided SDK\n# Follow the installation guide from Seyond for ROS 2 integration\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_6","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/robin_w_config.yaml\n/**:\nros__parameters:\ndevice_ip: \"192.168.1.250\"\ndevice_port: 7780\nframe_id: \"robin_w\"\nhorizontal_fov: 120.0  # degrees\nvertical_fov: 70.0     # degrees\nmin_range: 0.1\nmax_range: 150.0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#camera-configuration","title":"Camera Configuration","text":"<p>For camera hardware specifications and supported models, see Camera Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#usb-cameras","title":"USB Cameras","text":""},{"location":"software-configuration/sensor-configuration/#installation_7","title":"Installation","text":"<pre><code># Install USB camera driver\nsudo apt install ros-humble-usb-cam\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_7","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/usb_cam_config.yaml\n/**:\nros__parameters:\nvideo_device: \"/dev/video0\"\nframerate: 30.0\nio_method: \"mmap\"\nframe_id: \"camera\"\npixel_format: \"yuyv\"\nimage_width: 1920\nimage_height: 1080\ncamera_name: \"front_camera\"\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#udev-rules-for-consistent-naming","title":"Udev Rules for Consistent Naming","text":"<p>Create udev rules to ensure cameras always have the same device names:</p> <pre><code># Create udev rules file\nsudo tee /etc/udev/rules.d/99-cameras.rules &lt;&lt; EOF\n# Front camera\nSUBSYSTEM==\"video4linux\", ATTRS{idVendor}==\"046d\", ATTRS{idProduct}==\"085b\", SYMLINK+=\"video_front\"\n\n# Rear camera  \nSUBSYSTEM==\"video4linux\", ATTRS{idVendor}==\"046d\", ATTRS{idProduct}==\"0825\", SYMLINK+=\"video_rear\"\nEOF\n\n# Reload udev rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#gmsl-cameras","title":"GMSL Cameras","text":"<p>GMSL (Gigabit Multimedia Serial Link) cameras are commonly used in automotive applications, especially on NVIDIA platforms.</p>"},{"location":"software-configuration/sensor-configuration/#gmsl-configuration-on-agx-orin","title":"GMSL Configuration on AGX Orin","text":"<pre><code># Enable GMSL cameras\nsudo modprobe nvgmsl\necho \"nvgmsl\" | sudo tee -a /etc/modules-load.d/nvgmsl.conf\n\n# Configure camera parameters\nv4l2-ctl -d /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=YUYV\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#gmsl-launch-configuration","title":"GMSL Launch Configuration","text":"<pre><code># ~/autoware_config/sensors/gmsl_config.yaml\ngmsl_camera:\nros__parameters:\ncamera_info_url: \"file:///opt/autoware/calibration/gmsl_camera.yaml\"\nvideo_device: \"/dev/video0\"\npixel_format: \"YUYV\"\nimage_width: 1920\nimage_height: 1080\nframerate: 30.0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#gmsl-configuration-on-nvidia-platforms","title":"GMSL Configuration on NVIDIA Platforms","text":"<pre><code># For NVIDIA platforms, GMSL cameras are typically accessed through V4L2\n# List available video devices\nv4l2-ctl --list-devices\n\n# Query camera capabilities\nv4l2-ctl -d /dev/video0 --list-formats-ext\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#gstreamer-pipeline-for-gmsl","title":"GStreamer Pipeline for GMSL","text":"<pre><code># Example GStreamer pipeline for GMSL camera\ndef create_gmsl_pipeline(sensor_id=0):\n    return (\n        f\"nvarguscamerasrc sensor-id={sensor_id} ! \"\n        \"video/x-raw(memory:NVMM), width=1920, height=1080, framerate=30/1 ! \"\n        \"nvvidconv ! \"\n        \"video/x-raw, format=BGRx ! \"\n        \"videoconvert ! \"\n        \"video/x-raw, format=BGR ! \"\n        \"appsink\"\n    )\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#gige-vision-cameras","title":"GigE Vision Cameras","text":"<p>GigE Vision cameras use Ethernet for data transmission.</p>"},{"location":"software-configuration/sensor-configuration/#installation_8","title":"Installation","text":"<pre><code># Install Aravis library for GigE Vision support\nsudo apt install ros-humble-camera-aravis\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#network-configuration-for-gige","title":"Network Configuration for GigE","text":"<pre><code># Set up jumbo frames for GigE cameras\nsudo ip link set dev enp1s0 mtu 9000\n\n# Configure network buffers\nsudo sysctl -w net.core.rmem_max=33554432\nsudo sysctl -w net.core.rmem_default=33554432\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#configuration_8","title":"Configuration","text":"<pre><code># ~/autoware_config/sensors/gige_camera_config.yaml\n/**:\nros__parameters:\nguid: \"Basler-21995878\"  # Camera serial number\nframe_id: \"camera\"\nexposure_auto: true\ngain_auto: true\npixel_format: \"BayerRG8\"\npacket_size: 1500\npacket_delay: 0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#can-bus-configuration","title":"CAN Bus Configuration","text":"<p>CAN (Controller Area Network) is essential for vehicle control and telemetry. For CAN interface hardware information, see CAN Bus Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#socketcan-setup","title":"SocketCAN Setup","text":"<pre><code># Install CAN utilities\nsudo apt install can-utils\n\n# Load kernel modules\nsudo modprobe can\nsudo modprobe can_raw\nsudo modprobe vcan  # Virtual CAN for testing\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#physical-can-interface","title":"Physical CAN Interface","text":"<pre><code># Configure CAN interface\nsudo ip link set can0 type can bitrate 500000\nsudo ip link set up can0\n\n# Verify CAN interface is up\nip -details -statistics link show can0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#arm-specific-can-configuration","title":"ARM-Specific CAN Configuration","text":"<p>For ARM platforms, configure CAN with optimized settings:</p> <pre><code># Configure CAN filters for efficiency\nsudo ip link set can0 type can bitrate 500000 \\\nsample-point 0.875 restart-ms 100\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#virtual-can-for-testing","title":"Virtual CAN for Testing","text":"<pre><code># Create virtual CAN interface\nsudo ip link add dev vcan0 type vcan\nsudo ip link set up vcan0\n\n# Test with candump\ncandump vcan0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#can-dbc-file-configuration","title":"CAN DBC File Configuration","text":"<pre><code># ~/autoware_config/vehicle/can_config.yaml\n/**:\nros__parameters:\ncan_device: \"can0\"\ndbc_file_path: \"/path/to/vehicle.dbc\"\nsender_frames:\n- \"STEERING_COMMAND\"\n- \"THROTTLE_COMMAND\"\n- \"BRAKE_COMMAND\"\nreceiver_frames:\n- \"VEHICLE_STATUS\"\n- \"WHEEL_SPEEDS\"\n- \"STEERING_ANGLE\"\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#systemd-service-for-can","title":"Systemd Service for CAN","text":"<p>Create a systemd service to automatically configure CAN interfaces:</p> <pre><code>sudo tee /etc/systemd/system/can-setup.service &lt;&lt; EOF\n[Unit]\nDescription=Setup CAN interfaces\nAfter=network.target\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/setup-can.sh\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create the setup script\nsudo tee /usr/local/bin/setup-can.sh &lt;&lt; EOF\n#!/bin/bash\n# Configure CAN0\nip link set can0 type can bitrate 500000\nip link set up can0\n\n# Configure CAN1 if available\nif [ -e /sys/class/net/can1 ]; then\n    ip link set can1 type can bitrate 500000\n    ip link set up can1\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/setup-can.sh\nsudo systemctl enable can-setup.service\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#gnssimu-configuration","title":"GNSS/IMU Configuration","text":"<p>For GNSS/IMU hardware specifications and supported models, see GNSS/IMU Hardware Information.</p>"},{"location":"software-configuration/sensor-configuration/#gnss-receivers","title":"GNSS Receivers","text":""},{"location":"software-configuration/sensor-configuration/#serial-port-configuration","title":"Serial Port Configuration","text":"<pre><code># List serial ports\nls /dev/ttyUSB* /dev/ttyACM*\n\n# Set permissions\nsudo chmod 666 /dev/ttyUSB0\n\n# Create udev rule for persistent naming\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"1546\", ATTRS{idProduct}==\"01a9\", SYMLINK+=\"gnss\"' | \\\nsudo tee /etc/udev/rules.d/99-gnss.rules\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#nmea-configuration","title":"NMEA Configuration","text":"<pre><code># ~/autoware_config/sensors/gnss_config.yaml\n/**:\nros__parameters:\nport: \"/dev/gnss\"\nbaudrate: 115200\nframe_id: \"gnss\"\nuse_gnss_time: false\npublish_rate: 10.0\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#imu-configuration","title":"IMU Configuration","text":"<pre><code># ~/autoware_config/sensors/imu_config.yaml\n/**:\nros__parameters:\nport: \"/dev/ttyUSB1\"\nbaudrate: 921600\nframe_id: \"imu\"\nimu_rate: 200\nfilter_rate: 100\nmag_rate: 100\nenable_magnetometer: false\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#sensor-calibration","title":"Sensor Calibration","text":""},{"location":"software-configuration/sensor-configuration/#time-synchronization","title":"Time Synchronization","text":"<p>Accurate time synchronization is crucial for sensor fusion:</p> <pre><code># Install PTP for hardware time synchronization\nsudo apt install linuxptp\n\n# Configure PTP\nsudo tee /etc/linuxptp/ptp4l.conf &lt;&lt; EOF\n[global]\npriority1 128\npriority2 128\ndomainNumber 0\nclockClass 248\nclockAccuracy 0xFE\noffsetScaledLogVariance 0xFFFF\nfree_running 0\nfreq_est_interval 1\nEOF\n\n# Start PTP service\nsudo systemctl enable ptp4l\nsudo systemctl start ptp4l\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#sensor-launch-order","title":"Sensor Launch Order","text":"<p>Create a master launch file to ensure sensors start in the correct order:</p> <pre><code>&lt;!-- sensors.launch.xml --&gt;\n&lt;launch&gt;\n&lt;!-- Start time synchronization first --&gt;\n&lt;node pkg=\"sensor_sync\" exec=\"time_sync_node\" name=\"time_sync\"/&gt;\n\n&lt;!-- Start LiDARs --&gt;\n&lt;include file=\"$(find-pkg-share velodyne_driver)/launch/velodyne.launch.xml\"/&gt;\n\n&lt;!-- Start cameras after LiDARs --&gt;\n&lt;include file=\"$(find-pkg-share usb_cam)/launch/camera.launch.xml\"&gt;\n&lt;arg name=\"camera_name\" value=\"front_camera\"/&gt;\n&lt;/include&gt;\n\n&lt;!-- Start GNSS/IMU --&gt;\n&lt;include file=\"$(find-pkg-share nmea_navsat_driver)/launch/nmea_navsat.launch.xml\"/&gt;\n\n&lt;!-- Start CAN interface last --&gt;\n&lt;node pkg=\"socketcan_bridge\" exec=\"socketcan_bridge_node\" name=\"can_bridge\"&gt;\n&lt;param name=\"can_device\" value=\"can0\"/&gt;\n&lt;/node&gt;\n&lt;/launch&gt;\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/sensor-configuration/#network-issues","title":"Network Issues","text":"<pre><code># Check if sensor is reachable\nping 192.168.1.201\n\n# Monitor network traffic\nsudo tcpdump -i enp2s0 -n port 2368\n\n# Check for packet drops\nethtool -S enp2s0 | grep -i drop\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#usb-issues","title":"USB Issues","text":"<pre><code># List USB devices\nlsusb -v\n\n# Check USB bandwidth usage\ncat /sys/kernel/debug/usb/devices\n\n# Reset USB device\nsudo usbreset /dev/bus/usb/001/002\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#can-issues","title":"CAN Issues","text":"<pre><code># Monitor CAN bus\ncandump can0\n\n# Check CAN statistics\nip -details -statistics link show can0\n\n# Send test message\ncansend can0 123#DEADBEEF\n</code></pre>"},{"location":"software-configuration/sensor-configuration/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Use dedicated network interfaces for high-bandwidth sensors</li> <li>Configure CPU affinity for sensor driver nodes</li> <li>Enable jumbo frames for GigE cameras</li> <li>Use hardware time synchronization (PTP) when available</li> <li>Monitor system resources with <code>htop</code> and <code>iotop</code></li> </ul>"},{"location":"software-configuration/sensor-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to x86_64-based ECU Configuration for Intel/AMD platforms</li> <li>Or ARM-based ECU Configuration for NVIDIA Jetson platforms</li> <li>Configure sensor calibration using Autoware's calibration tools</li> <li>Set up sensor fusion parameters for optimal perception performance</li> </ul>"},{"location":"software-configuration/workflow-customization/","title":"Workflow Customization","text":"<p>This guide covers advanced customization options for the containerized Autoware deployment workflow.</p>"},{"location":"software-configuration/workflow-customization/#customization-workflow-overview","title":"Customization Workflow Overview","text":"<pre><code>graph TB\n    subgraph \"Step 1: Host Configuration\"\n        A1[Host System] --&gt; A2[Docker Engine]\n        A1 --&gt; A3[NVIDIA Container Toolkit]\n        A1 --&gt; A4[NVIDIA Driver]\n        A1 --&gt; A5[Custom Tools&lt;br/&gt;- Ansible&lt;br/&gt;- Build Tools]\n    end\n\n    subgraph \"Step 2: Image Customization\"\n        B1[Base Image] --&gt; B2{Customization Type}\n        B2 --&gt;|Add CUDA| B3[Custom CUDA Installation]\n        B2 --&gt;|Add Dependencies| B4[Additional Packages]\n        B2 --&gt;|Optimize| B5[Platform Optimizations]\n        B3 --&gt; B6[Build Custom Image]\n        B4 --&gt; B6\n        B5 --&gt; B6\n    end\n\n    subgraph \"Step 3: Container Runtime\"\n        C1[Launch Container] --&gt; C2[Runtime Options]\n        C2 --&gt; C3[GPU Access]\n        C2 --&gt; C4[Network Config]\n        C2 --&gt; C5[Resource Limits]\n        C2 --&gt; C6[Volume Mounts]\n    end\n\n    subgraph \"Step 4: Environment Configuration\"\n        D1[Clone Autoware Repo] --&gt; D2[Run setup-dev-env.sh]\n        D2 --&gt; D3[Ansible Playbooks]\n        D3 --&gt; D4[Custom Roles]\n        D4 --&gt; D5[Sensor Config]\n        D4 --&gt; D6[Platform Tuning]\n        D3 --&gt; D7[Variables &amp; Inventory]\n    end\n\n    subgraph \"Step 5: Package Installation\"\n        E1[Install localrepo Package] --&gt; E2[Install Autoware Packages]\n        E2 --&gt; E3[Custom Package Development]\n        E3 --&gt; E4[Deploy to Fleet]\n    end\n\n    subgraph \"External Workflow\"\n        F1[Build Packages] --&gt; F2[Create .deb Files]\n        F2 --&gt; F3[Setup APT Repository]\n        F3 --&gt; F4[Generate localrepo Package]\n    end\n\n    A5 --&gt; B1\n    B6 --&gt; C1\n    C6 --&gt; D1\n    D7 --&gt; E1\n    F4 -.-&gt;|Provides| E1\n\n    style A1 fill:#e3f2fd\n    style B1 fill:#f3e5f5\n    style C1 fill:#e8f5e9\n    style D1 fill:#fff3e0\n    style E1 fill:#fce4ec\n    style F1 fill:#f5f5f5</code></pre>"},{"location":"software-configuration/workflow-customization/#step-1-host-configuration-customization","title":"Step 1: Host Configuration Customization","text":""},{"location":"software-configuration/workflow-customization/#install-host-sensor-drivers","title":"Install Host Sensor Drivers","text":"<p>Some of the sensors ship proprietary drivers and userspace libraries, usually named SDKs. For example, StereoLabs cameras require the ZED Link driver and the ZED SDK to be installed. In the containerized setup, the ZED Link driver is installed on the host system, while the SDK is installed in the container.</p>"},{"location":"software-configuration/workflow-customization/#step-2-image-customization","title":"Step 2: Image Customization","text":""},{"location":"software-configuration/workflow-customization/#cuda-installation-in-custom-images","title":"CUDA Installation in Custom Images","text":"<p>While the recommended pre-built images include CUDA, you may need to install or update CUDA in custom containers:</p>"},{"location":"software-configuration/workflow-customization/#for-x86_64-containers","title":"For x86_64 Containers","text":"<pre><code># Install CUDA in Dockerfile\nRUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb &amp;&amp; \\\ndpkg -i cuda-keyring_1.1-1_all.deb &amp;&amp; \\\napt-get update &amp;&amp; \\\napt-get install -y cuda-toolkit-12-3 &amp;&amp; \\\nrm cuda-keyring_1.1-1_all.deb\n</code></pre>"},{"location":"software-configuration/workflow-customization/#for-arm64jetson-containers","title":"For ARM64/Jetson Containers","text":"<p>CUDA is typically pre-installed via JetPack. To verify or update:</p> <pre><code># Check CUDA version\nnvcc --version\n\n# For custom installations, use NVIDIA SDK Manager on the host\n</code></pre>"},{"location":"software-configuration/workflow-customization/#creating-custom-dockerfiles","title":"Creating Custom Dockerfiles","text":"<p>Extend the base Autoware image with custom components:</p> <pre><code># Dockerfile.custom\nFROM ghcr.io/autowarefoundation/autoware:humble-2025.02-arm64\n\n# Install additional dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\ncustom-driver-package \\\nadditional-tools \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy custom configuration\nCOPY config/custom_params.yaml /opt/autoware/config/\n\n# Add custom launch files\nCOPY launch/custom_autoware.launch.xml /opt/autoware/launch/\n\n# Set custom environment variables\nENV CUSTOM_PARAM=value\nENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n\n# Custom entrypoint\nCOPY scripts/custom_entrypoint.sh /\nRUN chmod +x /custom_entrypoint.sh\nENTRYPOINT [\"/custom_entrypoint.sh\"]\n</code></pre>"},{"location":"software-configuration/workflow-customization/#multi-stage-build-for-development","title":"Multi-Stage Build for Development","text":"<pre><code># Dockerfile.dev\n# Build stage\nFROM ghcr.io/autowarefoundation/autoware:humble-2025.02-arm64 AS builder\n\nWORKDIR /workspace\nCOPY src/ ./src/\n\n# Build custom packages\nRUN . /opt/ros/humble/setup.bash &amp;&amp; \\\ncolcon build --cmake-args -DCMAKE_BUILD_TYPE=Release\n\n# Runtime stage\nFROM ghcr.io/autowarefoundation/autoware:humble-2025.02-arm64\n\n# Copy built packages\nCOPY --from=builder /workspace/install /opt/autoware/custom\n\n# Update environment\nRUN echo \"source /opt/autoware/custom/setup.bash\" &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"software-configuration/workflow-customization/#cross-compilation","title":"Cross-Compilation","text":"<p>For faster builds, consider cross-compilation from an x86_64 host. See Docker Cross-Compilation Guide for details.</p>"},{"location":"software-configuration/workflow-customization/#step-3-container-runtime-customization","title":"Step 3: Container Runtime Customization","text":""},{"location":"software-configuration/workflow-customization/#gpu-and-hardware-access","title":"GPU and Hardware Access","text":"<p>Configure Docker run commands for optimal hardware access:</p> <pre><code>#!/bin/bash\n# launch_optimized.sh\n\ndocker run -it --rm \\\n--name autoware-optimized \\\n--gpus all \\\n--runtime nvidia \\\n--network host \\\n--privileged \\\n--ipc=host \\\n--pid=host \\\n--cap-add SYS_ADMIN \\\n--cap-add SYS_NICE \\\n--device /dev/bus/usb \\\n--device /dev/ttyUSB0:/dev/ttyUSB0 \\\n--device /dev/video0:/dev/video0 \\\n-v /dev/shm:/dev/shm \\\n-v /tmp/.X11-unix:/tmp/.X11-unix:rw \\\n-v ~/autoware_maps:/autoware_maps \\\n-v ~/autoware_data:/autoware_data \\\n-e DISPLAY=$DISPLAY \\\n-e QT_X11_NO_MITSHM=1 \\\n-e NVIDIA_DRIVER_CAPABILITIES=all \\\ncustom-autoware:latest\n</code></pre>"},{"location":"software-configuration/workflow-customization/#resource-limits-and-performance-tuning","title":"Resource Limits and Performance Tuning","text":"<pre><code># docker-compose.custom.yml\nversion: '3.8'\n\nservices:\nautoware:\nimage: custom-autoware:latest\nruntime: nvidia\ndeploy:\nresources:\nlimits:\ncpus: '8'\nmemory: 32G\nreservations:\ncpus: '4'\nmemory: 16G\ndevices:\n- driver: nvidia\ncount: 1\ncapabilities: [gpu]\nenvironment:\n- OMP_NUM_THREADS=8\n- OPENBLAS_NUM_THREADS=8\n- MKL_NUM_THREADS=8\nulimits:\nmemlock:\nsoft: -1\nhard: -1\nrtprio:\nsoft: 99\nhard: 99\n</code></pre>"},{"location":"software-configuration/workflow-customization/#network-configuration-for-fleet-deployment","title":"Network Configuration for Fleet Deployment","text":"<pre><code># Create custom bridge network\ndocker network create --driver bridge \\\n--subnet=172.20.0.0/16 \\\n--ip-range=172.20.240.0/20 \\\n--gateway=172.20.0.1 \\\nautoware-fleet\n\n# Launch containers on custom network\ndocker run -d --network autoware-fleet \\\n--ip 172.20.0.10 \\\n--hostname vehicle-001 \\\ncustom-autoware:latest\n</code></pre>"},{"location":"software-configuration/workflow-customization/#step-4-environment-configuration","title":"Step 4: Environment Configuration","text":""},{"location":"software-configuration/workflow-customization/#creating-custom-roles","title":"Creating Custom Roles","text":"<p>Extend the deployment with custom Ansible roles:</p> <pre><code># Create custom role structure\nmkdir -p ansible/roles/custom_component/{tasks,defaults,meta}\n</code></pre>"},{"location":"software-configuration/workflow-customization/#example-custom-sensor-configuration-role","title":"Example: Custom Sensor Configuration Role","text":"<pre><code># ansible/roles/lidar_config/tasks/main.yml\n---\n- name: Install LiDAR dependencies\napt:\nname:\n- ros-humble-velodyne\n- ros-humble-ouster-ros\nstate: present\n\n- name: Configure network for LiDAR\ntemplate:\nsrc: lidar_network.conf.j2\ndest: /etc/network/interfaces.d/lidar.conf\nnotify: restart networking\n\n- name: Set LiDAR parameters\ncopy:\ncontent: |\nlidar_ip: {{ lidar_ip_address }}\nlidar_port: {{ lidar_port }}\ndest: /opt/autoware/config/lidar.yaml\n</code></pre>"},{"location":"software-configuration/workflow-customization/#example-platform-specific-optimization-role","title":"Example: Platform-Specific Optimization Role","text":"<pre><code># ansible/roles/jetson_optimization/tasks/main.yml\n---\n- name: Configure Jetson power mode\ncommand: nvpmodel -m 0  # MAXN mode\nwhen: ansible_architecture == \"aarch64\"\n\n- name: Enable jetson clocks\ncommand: jetson_clocks --fan\nwhen: ansible_architecture == \"aarch64\"\n\n- name: Configure GPU memory growth\nlineinfile:\npath: /etc/environment\nline: 'TF_FORCE_GPU_ALLOW_GROWTH=true'\n</code></pre>"},{"location":"software-configuration/workflow-customization/#customizing-the-main-playbook","title":"Customizing the Main Playbook","text":"<p>Modify the main deployment playbook to include custom roles:</p> <pre><code># ansible/setup-autoware-custom.yml\n---\n- name: Custom Autoware Deployment\nhosts: localhost\nbecome: yes\n\nvars:\nautoware_version: \"2025.02\"\nenable_gpu_optimization: true\ncustom_sensors:\n- velodyne\n- ouster\n- hesai\n\nroles:\n- role: base_system\n- role: cuda_setup\nwhen: enable_gpu_optimization\n- role: autoware_core\n- role: sensor_drivers\nvars:\nsensors: \"{{ custom_sensors }}\"\n- role: jetson_optimization\nwhen: ansible_architecture == \"aarch64\"\n- role: custom_component\n</code></pre>"},{"location":"software-configuration/workflow-customization/#docker-image-customization","title":"Docker Image Customization","text":""},{"location":"software-configuration/workflow-customization/#creating-custom-dockerfiles_1","title":"Creating Custom Dockerfiles","text":"<p>Extend the base Autoware image with custom components:</p> <pre><code># Dockerfile.custom\nFROM ghcr.io/autowarefoundation/autoware:humble-2025.02-arm64\n\n# Install additional dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\ncustom-driver-package \\\nadditional-tools \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy custom configuration\nCOPY config/custom_params.yaml /opt/autoware/config/\n\n# Add custom launch files\nCOPY launch/custom_autoware.launch.xml /opt/autoware/launch/\n\n# Set custom environment variables\nENV CUSTOM_PARAM=value\nENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n\n# Custom entrypoint\nCOPY scripts/custom_entrypoint.sh /\nRUN chmod +x /custom_entrypoint.sh\nENTRYPOINT [\"/custom_entrypoint.sh\"]\n</code></pre>"},{"location":"software-configuration/workflow-customization/#multi-stage-build-for-development_1","title":"Multi-Stage Build for Development","text":"<pre><code># Dockerfile.dev\n# Build stage\nFROM ghcr.io/autowarefoundation/autoware:humble-2025.02-arm64 AS builder\n\nWORKDIR /workspace\nCOPY src/ ./src/\n\n# Build custom packages\nRUN . /opt/ros/humble/setup.bash &amp;&amp; \\\ncolcon build --cmake-args -DCMAKE_BUILD_TYPE=Release\n\n# Runtime stage\nFROM ghcr.io/autowarefoundation/autoware:humble-2025.02-arm64\n\n# Copy built packages\nCOPY --from=builder /workspace/install /opt/autoware/custom\n\n# Update environment\nRUN echo \"source /opt/autoware/custom/setup.bash\" &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"software-configuration/workflow-customization/#step-5-package-installation","title":"Step 5: Package Installation","text":"<p>This step focuses on installing pre-built Autoware packages from the local repository.</p>"},{"location":"software-configuration/workflow-customization/#custom-package-development","title":"Custom Package Development","text":"<p>For developing your own packages on top of Autoware, see the dedicated Package Creation Guide.</p>"},{"location":"software-configuration/x86_64-based_ECU/","title":"x86_64-based ECU Configuration","text":"<p>Deploy Autoware on Intel/AMD platforms for LSA vehicles.</p>"},{"location":"software-configuration/x86_64-based_ECU/#cuda-and-gpu-configuration","title":"CUDA and GPU Configuration","text":""},{"location":"software-configuration/x86_64-based_ECU/#1-cuda-toolkit-installation","title":"1. CUDA Toolkit Installation","text":"<p>For x86_64-based systems, CUDA must be installed manually. Visit the NVIDIA CUDA Toolkit Archive to find the appropriate version for your system.</p> <p>Recommended Installation Method: deb (network)</p> <p>Here's an example of installing CUDA Toolkit 12.3 using the network deb method:</p> <pre><code># Step 1: Download and install the cuda-keyring package\n# Visit https://developer.nvidia.com/cuda-toolkit-archive and select:\n# - Operating System: Linux\n# - Architecture: x86_64\n# - Distribution: Ubuntu\n# - Version: 22.04\n# - Installer Type: deb (network)\n\n# Install the keyring\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\n\n# Step 2: Update package lists\nsudo apt update\n\n# Step 3: Install CUDA Toolkit\nsudo apt install -y cuda-toolkit-12-3\n\n# Step 4: Verify installation\nnvidia-smi\nnvcc --version\n</code></pre>"},{"location":"software-configuration/x86_64-based_ECU/#2-install-additional-gpu-libraries","title":"2. Install Additional GPU Libraries","text":"<pre><code># Install cuDNN (after CUDA toolkit is installed)\n# Visit https://developer.nvidia.com/cudnn for the latest version\nsudo apt install -y cudnn\n\n# Install TensorRT\nsudo apt install -y tensorrt\n</code></pre>"},{"location":"software-configuration/x86_64-based_ECU/#3-configure-gpu-environment","title":"3. Configure GPU Environment","text":"<pre><code># Add CUDA to PATH\necho 'export PATH=/usr/local/cuda/bin:$PATH' &gt;&gt; ~/.bashrc\necho 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify GPU is accessible\nnvidia-smi\n</code></pre>"},{"location":"software-configuration/x86_64-based_ECU/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"software-configuration/x86_64-based_ECU/#system-monitoring-tools","title":"System Monitoring Tools","text":"<pre><code># CPU and system monitoring\nhtop\n\n# GPU monitoring\nnvtop\n\n# ROS 2 specific monitoring\nros2 run rqt_top rqt_top\n\n# Network monitoring\niftop\n</code></pre>"},{"location":"software-configuration/x86_64-based_ECU/#ros-2-performance-analysis","title":"ROS 2 Performance Analysis","text":"<pre><code># Monitor topic frequencies\nros2 topic hz /sensing/lidar/concatenated/pointcloud\n\n# Check node CPU usage\nros2 run rqt_top rqt_top\n\n# Analyze communication graph\nros2 run rqt_graph rqt_graph\n</code></pre>"},{"location":"software-configuration/x86_64-based_ECU/#next-steps","title":"Next Steps","text":"<p>See Sensor Configuration Guide for detailed sensor setup.</p>"},{"location":"system-configuration/","title":"System Configuration","text":"<p>(To be completed)</p> <p>The section describes the system configuration of the LSA vehicles. It shows the options to design your own LSA vehicles. The configuration consists of ECU selection, development approach, middleware candidates, etc. </p>"},{"location":"system-configuration/#key-considerations","title":"Key Considerations","text":""},{"location":"system-configuration/#hardware-selection","title":"Hardware Selection","text":"<ul> <li> <p>ARM ECUs: Superior power efficiency, integrated GPU/DLA acceleration, compact form factor</p> </li> <li> <p>x86 ECUs: Better for high-compute perception tasks, easier software compatibility</p> </li> </ul>"},{"location":"system-configuration/#recommended-hardware-configurations","title":"Recommended Hardware Configurations","text":"<p>For X86-based ECUs, there are configurations for different use scearios. </p>"},{"location":"system-configuration/#high-performance-configuration","title":"High-Performance Configuration","text":"<ul> <li>CPU: Intel Core i9-13900K or AMD Ryzen 9 7950X (16+ cores)</li> <li>RAM: 64 GB DDR5</li> <li>GPU: NVIDIA RTX 4090 or RTX A6000</li> <li>Storage: 1TB NVMe SSD (PCIe 4.0)</li> <li>Network: Dual 10GbE interfaces</li> <li>Power: 850W+ PSU with redundancy</li> </ul>"},{"location":"system-configuration/#standard-configuration","title":"Standard Configuration","text":"<ul> <li>CPU: Intel Core i7-12700K or AMD Ryzen 7 7700X (8+ cores)</li> <li>RAM: 32 GB DDR4/DDR5</li> <li>GPU: NVIDIA RTX 3080 or RTX A4000</li> <li>Storage: 512GB NVMe SSD</li> <li>Network: Gigabit Ethernet</li> <li>Power: 650W PSU</li> </ul>"},{"location":"system-configuration/#minimum-configuration","title":"Minimum Configuration","text":"<ul> <li>CPU: Intel Core i5-12600K or AMD Ryzen 5 5600X (6+ cores)</li> <li>RAM: 16 GB DDR4</li> <li>GPU: NVIDIA RTX 3060 or T1000</li> <li>Storage: 256GB SSD</li> <li>Network: Gigabit Ethernet</li> <li>Power: 550W PSU</li> </ul>"},{"location":"system-configuration/#industrialvehicle-grade-options","title":"Industrial/Vehicle-Grade Options","text":"<ul> <li>Neousys Nuvo-8108GC: Rugged x86 platform with RTX GPU support</li> <li>Advantech MIC-770: Compact industrial PC with GPU expansion</li> <li>Crystal Group RS363S: MIL-SPEC certified with NVIDIA GPU</li> </ul>"},{"location":"system-configuration/#development-approach","title":"Development Approach","text":"<ul> <li>Native Installation: Direct installation on hardware for maximum performance</li> <li>Containerized Development: Reproducible environments with easier team collaboration (recommended for ARM)</li> </ul>"},{"location":"system-configuration/#middleware-choice","title":"Middleware Choice","text":"<ul> <li>Default DDS: Mature, widely supported, industry standard</li> <li>rmw_zenoh: Modern alternative with better performance for LSA applications</li> </ul>"}]}